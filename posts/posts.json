[
  {
    "path": "posts/2021-05-26-guest-post-1-communicating-the-essence-of-your-data/",
    "title": "Guest Post #1. Communicating the ESSENCE of your data",
    "description": "Visualizing multidimensional and dynamic data can be challenging. In this post, I will show how you can better communicate these features with interactive plots and animations.",
    "author": [
      {
        "name": "William Ou",
        "url": {}
      }
    ],
    "date": "2021-05-26",
    "categories": [
      "2021"
    ],
    "contents": "\r\n\r\n\r\nd-article a {\r\n    color: #2780e3 !important;\r\n      border-bottom: none !important;\r\n}\r\n\r\nd-article a:hover {\r\n  color: #2780e3 !important;\r\n    border-bottom: 2px solid !important;\r\n}\r\n\r\nd-byline {\r\n  margin-left: -10% !important;\r\n}\r\n\r\nd-title {\r\n  margin-left: -10%;\r\n}\r\n\r\nd-title h1{\r\n  font-size: 45px;\r\n  width: 130%;\r\n}\r\n\r\nd-article {\r\n  margin-left: -10%;\r\n}\r\n\r\np {\r\n  width: 120%;\r\n}\r\n\r\nd-article h2 {\r\n  width: 120%;\r\n}\r\n\r\nd-article h3 {\r\n  width: 120%;\r\n  font-size: 32px;\r\n}\r\n\r\ndiv.article-footer{\r\n  width: 120%;\r\n}\r\n\r\nd-article div.sourceCode { \r\n  width: 120% !important;\r\n}\r\n\r\nd-article pre { \r\n  width: 120% !important;\r\n}\r\n\r\ndiv.l-body {\r\n  width: 120% !important;\r\n}\r\n\r\nd-article table thead tr {\r\n  height: 60px !important;\r\n  width: 210px !important;\r\n}\r\n\r\nd-article table thead th {\r\n  height: 60px !important;\r\n  font-size: 22px !important;\r\n  width: 210px !important;\r\n}\r\n\r\nd-article table tbody tr td {\r\n  font-size: 21px !important;\r\n  height: 60px !important;\r\n  text-align: center !important;\r\n  width: 210px !important;\r\n}\r\n\r\nFrom the host: Here comes the first guest post by William Ou! In this post, he will show you how to “attractively” visualize the data using interactive plots and animations. This is a rather long post, but fear not, I promise you will find it interesting, and most importantly, your data visualization skills will LEVEL UP!\r\nBefore we start, make sure you have the following packages installed:\r\n\r\n\r\n# Packages used in this post\r\nlibrary(tidyverse)\r\nlibrary(plotly)\r\nlibrary(vegan)\r\nlibrary(gapminder)\r\nlibrary(gganimate)\r\nlibrary(palmerpenguins)\r\n\r\n\r\n\r\nThe challenge\r\nArguably the biggest challenge in data visualization is the fact that we live in a multi-dimensional and dynamic 1 world. Our 3D perception of the universe is an obvious case in support of the multi-dimensions part (all we need is more than 1-dimension!). You might argue that some things are in fact static though. But! If you look closely enough, everything in the physical world is dynamic, constantly moving and fluctuating in space and time. The screen on your computer may look “static” but it’s actually constantly emitting light. Even the wall in your room is made up of particles that are constantly moving. Yet, despite the ubiquity of multi-dimensionality and dynamical behaviors, a large amount of the information we acquire today comes in the standard 2D and static format: the book or Wikipedia page you’re reading, you’re Facebook feed, magazines etc.. Although there are ways of representing dynamic and multi-dimension features in 2D static mediums, doing so often distorts the original information and can hinder the “essence” of the message that one wishes to convey. In many cases, deciphering distorted information requires practice and prior knowledge which renders the information accessible to only a few selected individuals. To demonstrate my point, consider the 2 ways of visualizing the Palmer Penguins dataset below:\r\nApproach 1: Dimension reduction (PCA)\r\n\r\n\r\n\r\nApproach 2: 3D interactive plots\r\n\r\n\r\n{\"x\":{\"visdat\":{\"1cd044266f5a\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"1cd044266f5a\",\"attrs\":{\"1cd044266f5a\":{\"x\":{},\"y\":{},\"z\":{},\"col\":{},\"legendgroup\":{},\"marker\":{\"color\":{},\"colorscale\":[\"#FFE1A1\",\"#683531\"],\"showscale\":true},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Palmer Penguins\",\"scene\":{\"xaxis\":{\"title\":\"Bill length (mm)\"},\"yaxis\":{\"title\":\"Bill depth (mm)\"},\"zaxis\":{\"title\":\"Flipper length (mm)\"}},\"annotations\":[{\"x\":1.13,\"y\":1.05,\"text\":\"Body mass (g)\",\"showarrow\":false}],\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[39.1,39.5,40.3,36.7,39.3,38.9,39.2,41.1,38.6,34.6,36.6,38.7,42.5,34.4,46,37.8,37.7,35.9,38.2,38.8,35.3,40.6,40.5,37.9,40.5,39.5,37.2,39.5,40.9,36.4,39.2,38.8,42.2,37.6,39.8,36.5,40.8,36,44.1,37,39.6,41.1,36,42.3,39.6,40.1,35,42,34.5,41.4,39,40.6,36.5,37.6,35.7,41.3,37.6,41.1,36.4,41.6,35.5,41.1,35.9,41.8,33.5,39.7,39.6,45.8,35.5,42.8,40.9,37.2,36.2,42.1,34.6,42.9,36.7,35.1,37.3,41.3,36.3,36.9,38.3,38.9,35.7,41.1,34,39.6,36.2,40.8,38.1,40.3,33.1,43.2,35,41,37.7,37.8,37.9,39.7,38.6,38.2,38.1,43.2,38.1,45.6,39.7,42.2,39.6,42.7,38.6,37.3,35.7,41.1,36.2,37.7,40.2,41.4,35.2,40.6,38.8,41.5,39,44.1,38.5,43.1,36.8,37.5,38.1,41.1,35.6,40.2,37,39.7,40.2,40.6,32.1,40.7,37.3,39,39.2,36.6,36,37.8,36,41.5,46.1,50,48.7,50,47.6,46.5,45.4,46.7,43.3,46.8,40.9,49,45.5,48.4,45.8,49.3,42,49.2,46.2,48.7,50.2,45.1,46.5,46.3,42.9,46.1,47.8,48.2,50,47.3,42.8,45.1,59.6,49.1,48.4,42.6,44.4,44,48.7,42.7,49.6,45.3,49.6,50.5,43.6,45.5,50.5,44.9,45.2,46.6,48.5,45.1,50.1,46.5,45,43.8,45.5,43.2,50.4,45.3,46.2,45.7,54.3,45.8,49.8,49.5,43.5,50.7,47.7,46.4,48.2,46.5,46.4,48.6,47.5,51.1,45.2,45.2,49.1,52.5,47.4,50,44.9,50.8,43.4,51.3,47.5,52.1,47.5,52.2,45.5,49.5,44.5,50.8,49.4,46.9,48.4,51.1,48.5,55.9,47.2,49.1,46.8,41.7,53.4,43.3,48.1,50.5,49.8,43.5,51.5,46.2,55.1,48.8,47.2,46.8,50.4,45.2,49.9,46.5,50,51.3,45.4,52.7,45.2,46.1,51.3,46,51.3,46.6,51.7,47,52,45.9,50.5,50.3,58,46.4,49.2,42.4,48.5,43.2,50.6,46.7,52,50.5,49.5,46.4,52.8,40.9,54.2,42.5,51,49.7,47.5,47.6,52,46.9,53.5,49,46.2,50.9,45.5,50.9,50.8,50.1,49,51.5,49.8,48.1,51.4,45.7,50.7,42.5,52.2,45.2,49.3,50.2,45.6,51.9,46.8,45.7,55.8,43.5,49.6,50.8,50.2],\"y\":[18.7,17.4,18,19.3,20.6,17.8,19.6,17.6,21.2,21.1,17.8,19,20.7,18.4,21.5,18.3,18.7,19.2,18.1,17.2,18.9,18.6,17.9,18.6,18.9,16.7,18.1,17.8,18.9,17,21.1,20,18.5,19.3,19.1,18,18.4,18.5,19.7,16.9,18.8,19,17.9,21.2,17.7,18.9,17.9,19.5,18.1,18.6,17.5,18.8,16.6,19.1,16.9,21.1,17,18.2,17.1,18,16.2,19.1,16.6,19.4,19,18.4,17.2,18.9,17.5,18.5,16.8,19.4,16.1,19.1,17.2,17.6,18.8,19.4,17.8,20.3,19.5,18.6,19.2,18.8,18,18.1,17.1,18.1,17.3,18.9,18.6,18.5,16.1,18.5,17.9,20,16,20,18.6,18.9,17.2,20,17,19,16.5,20.3,17.7,19.5,20.7,18.3,17,20.5,17,18.6,17.2,19.8,17,18.5,15.9,19,17.6,18.3,17.1,18,17.9,19.2,18.5,18.5,17.6,17.5,17.5,20.1,16.5,17.9,17.1,17.2,15.5,17,16.8,18.7,18.6,18.4,17.8,18.1,17.1,18.5,13.2,16.3,14.1,15.2,14.5,13.5,14.6,15.3,13.4,15.4,13.7,16.1,13.7,14.6,14.6,15.7,13.5,15.2,14.5,15.1,14.3,14.5,14.5,15.8,13.1,15.1,15,14.3,15.3,15.3,14.2,14.5,17,14.8,16.3,13.7,17.3,13.6,15.7,13.7,16,13.7,15,15.9,13.9,13.9,15.9,13.3,15.8,14.2,14.1,14.4,15,14.4,15.4,13.9,15,14.5,15.3,13.8,14.9,13.9,15.7,14.2,16.8,16.2,14.2,15,15,15.6,15.6,14.8,15,16,14.2,16.3,13.8,16.4,14.5,15.6,14.6,15.9,13.8,17.3,14.4,14.2,14,17,15,17.1,14.5,16.1,14.7,15.7,15.8,14.6,14.4,16.5,15,17,15.5,15,16.1,14.7,15.8,14,15.1,15.2,15.9,15.2,16.3,14.1,16,16.2,13.7,14.3,15.7,14.8,16.1,17.9,19.5,19.2,18.7,19.8,17.8,18.2,18.2,18.9,19.9,17.8,20.3,17.3,18.1,17.1,19.6,20,17.8,18.6,18.2,17.3,17.5,16.6,19.4,17.9,19,18.4,19,17.8,20,16.6,20.8,16.7,18.8,18.6,16.8,18.3,20.7,16.6,19.9,19.5,17.5,19.1,17,17.9,18.5,17.9,19.6,18.7,17.3,16.4,19,17.3,19.7,17.3,18.8,16.6,19.9,18.8,19.4,19.5,16.5,17,19.8,18.1,18.2,19,18.7],\"z\":[181,186,195,193,190,181,195,182,191,198,185,195,197,184,194,174,180,189,185,180,187,183,187,172,180,178,178,188,184,195,196,190,180,181,184,182,195,186,196,185,190,182,190,191,186,188,190,200,187,191,186,193,181,194,185,195,185,192,184,192,195,188,190,198,190,190,196,197,190,195,191,184,187,195,189,196,187,193,191,194,190,189,189,190,202,205,185,186,187,208,190,196,178,192,192,203,183,190,193,184,199,190,181,197,198,191,193,197,191,196,188,199,189,189,187,198,176,202,186,199,191,195,191,210,190,197,193,199,187,190,191,200,185,193,193,187,188,190,192,185,190,184,195,193,187,201,211,230,210,218,215,210,211,219,209,215,214,216,214,213,210,217,210,221,209,222,218,215,213,215,215,215,215,210,220,222,209,207,230,220,220,213,219,208,208,208,225,210,216,222,217,210,225,213,215,210,220,210,225,217,220,208,220,208,224,208,221,214,231,219,230,229,220,223,216,221,221,217,216,230,209,220,215,223,212,221,212,224,212,228,218,218,212,230,218,228,212,224,214,226,216,222,203,225,219,228,215,228,215,210,219,208,209,216,229,213,230,217,230,222,214,215,222,212,213,192,196,193,188,197,198,178,197,195,198,193,194,185,201,190,201,197,181,190,195,181,191,187,193,195,197,200,200,191,205,187,201,187,203,195,199,195,210,192,205,210,187,196,196,196,201,190,212,187,198,199,201,193,203,187,197,191,203,202,194,206,189,195,207,202,193,210,198],\"col\":[3750,3800,3250,3450,3650,3625,4675,3200,3800,4400,3700,3450,4500,3325,4200,3400,3600,3800,3950,3800,3800,3550,3200,3150,3950,3250,3900,3300,3900,3325,4150,3950,3550,3300,4650,3150,3900,3100,4400,3000,4600,3425,3450,4150,3500,4300,3450,4050,2900,3700,3550,3800,2850,3750,3150,4400,3600,4050,2850,3950,3350,4100,3050,4450,3600,3900,3550,4150,3700,4250,3700,3900,3550,4000,3200,4700,3800,4200,3350,3550,3800,3500,3950,3600,3550,4300,3400,4450,3300,4300,3700,4350,2900,4100,3725,4725,3075,4250,2925,3550,3750,3900,3175,4775,3825,4600,3200,4275,3900,4075,2900,3775,3350,3325,3150,3500,3450,3875,3050,4000,3275,4300,3050,4000,3325,3500,3500,4475,3425,3900,3175,3975,3400,4250,3400,3475,3050,3725,3000,3650,4250,3475,3450,3750,3700,4000,4500,5700,4450,5700,5400,4550,4800,5200,4400,5150,4650,5550,4650,5850,4200,5850,4150,6300,4800,5350,5700,5000,4400,5050,5000,5100,5650,4600,5550,5250,4700,5050,6050,5150,5400,4950,5250,4350,5350,3950,5700,4300,4750,5550,4900,4200,5400,5100,5300,4850,5300,4400,5000,4900,5050,4300,5000,4450,5550,4200,5300,4400,5650,4700,5700,5800,4700,5550,4750,5000,5100,5200,4700,5800,4600,6000,4750,5950,4625,5450,4725,5350,4750,5600,4600,5300,4875,5550,4950,5400,4750,5650,4850,5200,4925,4875,4625,5250,4850,5600,4975,5500,5500,4700,5500,4575,5500,5000,5950,4650,5500,4375,5850,6000,4925,4850,5750,5200,5400,3500,3900,3650,3525,3725,3950,3250,3750,4150,3700,3800,3775,3700,4050,3575,4050,3300,3700,3450,4400,3600,3400,2900,3800,3300,4150,3400,3800,3700,4550,3200,4300,3350,4100,3600,3900,3850,4800,2700,4500,3950,3650,3550,3500,3675,4450,3400,4300,3250,3675,3325,3950,3600,4050,3350,3450,3250,4050,3800,3525,3950,3650,3650,4000,3400,3775,4100,3775],\"legendgroup\":[3750,3800,3250,3450,3650,3625,4675,3200,3800,4400,3700,3450,4500,3325,4200,3400,3600,3800,3950,3800,3800,3550,3200,3150,3950,3250,3900,3300,3900,3325,4150,3950,3550,3300,4650,3150,3900,3100,4400,3000,4600,3425,3450,4150,3500,4300,3450,4050,2900,3700,3550,3800,2850,3750,3150,4400,3600,4050,2850,3950,3350,4100,3050,4450,3600,3900,3550,4150,3700,4250,3700,3900,3550,4000,3200,4700,3800,4200,3350,3550,3800,3500,3950,3600,3550,4300,3400,4450,3300,4300,3700,4350,2900,4100,3725,4725,3075,4250,2925,3550,3750,3900,3175,4775,3825,4600,3200,4275,3900,4075,2900,3775,3350,3325,3150,3500,3450,3875,3050,4000,3275,4300,3050,4000,3325,3500,3500,4475,3425,3900,3175,3975,3400,4250,3400,3475,3050,3725,3000,3650,4250,3475,3450,3750,3700,4000,4500,5700,4450,5700,5400,4550,4800,5200,4400,5150,4650,5550,4650,5850,4200,5850,4150,6300,4800,5350,5700,5000,4400,5050,5000,5100,5650,4600,5550,5250,4700,5050,6050,5150,5400,4950,5250,4350,5350,3950,5700,4300,4750,5550,4900,4200,5400,5100,5300,4850,5300,4400,5000,4900,5050,4300,5000,4450,5550,4200,5300,4400,5650,4700,5700,5800,4700,5550,4750,5000,5100,5200,4700,5800,4600,6000,4750,5950,4625,5450,4725,5350,4750,5600,4600,5300,4875,5550,4950,5400,4750,5650,4850,5200,4925,4875,4625,5250,4850,5600,4975,5500,5500,4700,5500,4575,5500,5000,5950,4650,5500,4375,5850,6000,4925,4850,5750,5200,5400,3500,3900,3650,3525,3725,3950,3250,3750,4150,3700,3800,3775,3700,4050,3575,4050,3300,3700,3450,4400,3600,3400,2900,3800,3300,4150,3400,3800,3700,4550,3200,4300,3350,4100,3600,3900,3850,4800,2700,4500,3950,3650,3550,3500,3675,4450,3400,4300,3250,3675,3325,3950,3600,4050,3350,3450,3250,4050,3800,3525,3950,3650,3650,4000,3400,3775,4100,3775],\"marker\":{\"color\":[3750,3800,3250,3450,3650,3625,4675,3200,3800,4400,3700,3450,4500,3325,4200,3400,3600,3800,3950,3800,3800,3550,3200,3150,3950,3250,3900,3300,3900,3325,4150,3950,3550,3300,4650,3150,3900,3100,4400,3000,4600,3425,3450,4150,3500,4300,3450,4050,2900,3700,3550,3800,2850,3750,3150,4400,3600,4050,2850,3950,3350,4100,3050,4450,3600,3900,3550,4150,3700,4250,3700,3900,3550,4000,3200,4700,3800,4200,3350,3550,3800,3500,3950,3600,3550,4300,3400,4450,3300,4300,3700,4350,2900,4100,3725,4725,3075,4250,2925,3550,3750,3900,3175,4775,3825,4600,3200,4275,3900,4075,2900,3775,3350,3325,3150,3500,3450,3875,3050,4000,3275,4300,3050,4000,3325,3500,3500,4475,3425,3900,3175,3975,3400,4250,3400,3475,3050,3725,3000,3650,4250,3475,3450,3750,3700,4000,4500,5700,4450,5700,5400,4550,4800,5200,4400,5150,4650,5550,4650,5850,4200,5850,4150,6300,4800,5350,5700,5000,4400,5050,5000,5100,5650,4600,5550,5250,4700,5050,6050,5150,5400,4950,5250,4350,5350,3950,5700,4300,4750,5550,4900,4200,5400,5100,5300,4850,5300,4400,5000,4900,5050,4300,5000,4450,5550,4200,5300,4400,5650,4700,5700,5800,4700,5550,4750,5000,5100,5200,4700,5800,4600,6000,4750,5950,4625,5450,4725,5350,4750,5600,4600,5300,4875,5550,4950,5400,4750,5650,4850,5200,4925,4875,4625,5250,4850,5600,4975,5500,5500,4700,5500,4575,5500,5000,5950,4650,5500,4375,5850,6000,4925,4850,5750,5200,5400,3500,3900,3650,3525,3725,3950,3250,3750,4150,3700,3800,3775,3700,4050,3575,4050,3300,3700,3450,4400,3600,3400,2900,3800,3300,4150,3400,3800,3700,4550,3200,4300,3350,4100,3600,3900,3850,4800,2700,4500,3950,3650,3550,3500,3675,4450,3400,4300,3250,3675,3325,3950,3600,4050,3350,3450,3250,4050,3800,3525,3950,3650,3650,4000,3400,3775,4100,3775],\"colorscale\":[\"#FFE1A1\",\"#683531\"],\"showscale\":true,\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"type\":\"scatter3d\",\"mode\":\"markers\",\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\r\nIf you’ve learned PCA before, you might have no problem interpreting Approach 1. But if you haven’t, you might be wondering: What the **** is a PC1/PC2? What are the units of the axes? Why are there arrows pointing at different directions? What does a single point even represent? Most importantly, where did my penguins go!? Because the focus of this post is not about statistics, I won’t go into the details of explaining what a PCA is. What I do want to point out though, is how we can visualize data in a more accessible manner.\r\nNow, Approach 2 may also look like a handful. However, if you take a deep breath and carefully examine the plot, anyone would be able to interpret it, even without any background (assuming that they can read English, of course)! Upon closer inspection, you’ll see that each point in the figure is made up of 4 variables: 1. Bill length (mm), 2. Bill depth (mm), 3. Flipper length (mm), and 4. Body size (g). All these variables characterize an individual penguin (a penguin is multi-dimensional!). The 4 variables are represented by 3 axes and a color gradient. The reason why we do not have a 4th axis is because our brain is not programmed to think that way, so the 4th variable is represented as a color gradient instead. An important thing to note is that, these points on the plot show exactly what the data says. Nothing is distorted and its as raw as it can be. One cool feature of this plot is that it is interactive. Although our screen is 2D, we can get a better “feel” of the dimensionality by rotating the axes around. Rotating works by dragging the plot around with your cursor. By doing so, we’ll see that at certain angles, the points look like a big “cloud” while at other angles you can see a clear separation between clusters of points. Try playing around with the plot, explore its features, and see if you can find other ways of visualizing your data.\r\nDynamic variables\r\nNow let’s take a look at some ways to visualize dynamic variables, variables that change over time.\r\nApproach 1: Static representation with arrows\r\n\r\n\r\n\r\nApproach 2: Animate to reveal each time step sequentially\r\n\r\n\r\n\r\nFor the dynamics example, the two figures above are actually identical. The only difference is that the animation shows how the state variable (in this case, life expectancy) develops over time by revealing each data sequentially as time progresses. Animations are particularly helpful for visualizing time-series data with multiple variables because things can get cluttered really fast when lines are drawn to represent the passage of time. Although the animated version also shows a lot of cluttering towards the end, it doesn’t necessarily impede understanding because the viewer already has a sense of where each point came from.\r\nThe gapminder dataset is the perfect example that demonstrates the power of good data visualization! If you haven’t already, I strongly encourage you to check out the seminal TED talk by Hans Rosling, the OG of descriptive and exploratory data analysis.\r\nNow for some coding\r\nLet’s go over some simple examples to see how you can make your own interactive plot with plotly and animation with gganimate. Both of these packages have really good documentation and you can find out more about them on their websites: plotly and gganimate\r\nI. Making your first interactive 3D plot with plotly\r\nWe’ll use the mtcars dataset here as an example. Make sure to have the plotly package installed on your computer.\r\nThe plotly package is built to be compatible with tidyverse with both sharing very similar syntax. Just as ggplot() is to ggplot2, the main engine of plotly plots is the function plot_ly(). Again, very similar to ggplot2, we supply the plot_ly() function with our data frame and the variables we would like to plot.\r\nWe’ll start by loading the package(s) first, and tweak the dataset a little bit prior to plotting. Here, we will treat # of cylinders as a factor instead of a integer value for visualization purposes.\r\n\r\n\r\nmtcars_new <-  mtcars %>%\r\n  mutate(cyl = as.factor(cyl))\r\n\r\n\r\n\r\nAgain, very similar to ggplot(), we supply the plot_ly() function with the data that we want to plot and specify the axes which would be x, y, and z since we have a 3rd dimension. Note the small differences in how the variables are defined here. In plot_ly() the variables are defined with the “~” (tilde), which is like what you would normally do when defining a linear model (e.g. lm(y ~ x1 + x2)). In addition, we’ll also specify a 4th variable/dimension as the color of the points.\r\n\r\n\r\nmt_plotly <- plot_ly(data = mtcars_new, x = ~wt, y = ~hp, z = ~qsec,\r\n        color = ~cyl)\r\nmt_plotly\r\n\r\n\r\n\r\n{\"x\":{\"visdat\":{\"1cd0256d6d94\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"1cd0256d6d94\",\"attrs\":{\"1cd0256d6d94\":{\"x\":{},\"y\":{},\"z\":{},\"color\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"scene\":{\"xaxis\":{\"title\":\"wt\"},\"yaxis\":{\"title\":\"hp\"},\"zaxis\":{\"title\":\"qsec\"}},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[2.32,3.19,3.15,2.2,1.615,1.835,2.465,1.935,2.14,1.513,2.78],\"y\":[93,62,95,66,52,65,97,66,91,113,109],\"z\":[18.61,20,22.9,19.47,18.52,19.9,20.01,18.9,16.7,16.9,18.6],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"4\",\"marker\":{\"color\":\"rgba(102,194,165,1)\",\"line\":{\"color\":\"rgba(102,194,165,1)\"}},\"textfont\":{\"color\":\"rgba(102,194,165,1)\"},\"error_y\":{\"color\":\"rgba(102,194,165,1)\"},\"error_x\":{\"color\":\"rgba(102,194,165,1)\"},\"line\":{\"color\":\"rgba(102,194,165,1)\"},\"frame\":null},{\"x\":[2.62,2.875,3.215,3.46,3.44,3.44,2.77],\"y\":[110,110,110,105,123,123,175],\"z\":[16.46,17.02,19.44,20.22,18.3,18.9,15.5],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"6\",\"marker\":{\"color\":\"rgba(252,141,98,1)\",\"line\":{\"color\":\"rgba(252,141,98,1)\"}},\"textfont\":{\"color\":\"rgba(252,141,98,1)\"},\"error_y\":{\"color\":\"rgba(252,141,98,1)\"},\"error_x\":{\"color\":\"rgba(252,141,98,1)\"},\"line\":{\"color\":\"rgba(252,141,98,1)\"},\"frame\":null},{\"x\":[3.44,3.57,4.07,3.73,3.78,5.25,5.424,5.345,3.52,3.435,3.84,3.845,3.17,3.57],\"y\":[175,245,180,180,180,205,215,230,150,150,245,175,264,335],\"z\":[17.02,15.84,17.4,17.6,18,17.98,17.82,17.42,16.87,17.3,15.41,17.05,14.5,14.6],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"8\",\"marker\":{\"color\":\"rgba(141,160,203,1)\",\"line\":{\"color\":\"rgba(141,160,203,1)\"}},\"textfont\":{\"color\":\"rgba(141,160,203,1)\"},\"error_y\":{\"color\":\"rgba(141,160,203,1)\"},\"error_x\":{\"color\":\"rgba(141,160,203,1)\"},\"line\":{\"color\":\"rgba(141,160,203,1)\"},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\r\nAnd there you have it! Pretty straightforward, right? But if you’re picky, you might not be satisfied with this and want to tweak it some more. So let’s try to edit the axis labels, since they’re all abbreviated and have no units. Through the following code, you’ll start seeing more tidyverse/ggplot2 style elements of the plot_ly syntax, see if you can spot them!\r\n\r\n\r\nmt_plotly %>%\r\n    layout(title = 'Motor Trend Car Road Tests',\r\n         scene = list(xaxis = list(title = 'Weight (1000lbs)'),\r\n                      yaxis = list(title = 'Horsepower (hp)'),\r\n                      zaxis = list(title = 'Quarter mile time (s)')),\r\n         annotations = list( #this section is hard-coded \r\n           x = 1.13,\r\n           y = 1.05,\r\n           text = '# of Cylcinders',\r\n           showarrow = FALSE))\r\n\r\n\r\n\r\n{\"x\":{\"visdat\":{\"1cd0256d6d94\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"1cd0256d6d94\",\"attrs\":{\"1cd0256d6d94\":{\"x\":{},\"y\":{},\"z\":{},\"color\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Motor Trend Car Road Tests\",\"scene\":{\"xaxis\":{\"title\":\"Weight (1000lbs)\"},\"yaxis\":{\"title\":\"Horsepower (hp)\"},\"zaxis\":{\"title\":\"Quarter mile time (s)\"}},\"annotations\":[{\"x\":1.13,\"y\":1.05,\"text\":\"# of Cylcinders\",\"showarrow\":false}],\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[2.32,3.19,3.15,2.2,1.615,1.835,2.465,1.935,2.14,1.513,2.78],\"y\":[93,62,95,66,52,65,97,66,91,113,109],\"z\":[18.61,20,22.9,19.47,18.52,19.9,20.01,18.9,16.7,16.9,18.6],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"4\",\"marker\":{\"color\":\"rgba(102,194,165,1)\",\"line\":{\"color\":\"rgba(102,194,165,1)\"}},\"textfont\":{\"color\":\"rgba(102,194,165,1)\"},\"error_y\":{\"color\":\"rgba(102,194,165,1)\"},\"error_x\":{\"color\":\"rgba(102,194,165,1)\"},\"line\":{\"color\":\"rgba(102,194,165,1)\"},\"frame\":null},{\"x\":[2.62,2.875,3.215,3.46,3.44,3.44,2.77],\"y\":[110,110,110,105,123,123,175],\"z\":[16.46,17.02,19.44,20.22,18.3,18.9,15.5],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"6\",\"marker\":{\"color\":\"rgba(252,141,98,1)\",\"line\":{\"color\":\"rgba(252,141,98,1)\"}},\"textfont\":{\"color\":\"rgba(252,141,98,1)\"},\"error_y\":{\"color\":\"rgba(252,141,98,1)\"},\"error_x\":{\"color\":\"rgba(252,141,98,1)\"},\"line\":{\"color\":\"rgba(252,141,98,1)\"},\"frame\":null},{\"x\":[3.44,3.57,4.07,3.73,3.78,5.25,5.424,5.345,3.52,3.435,3.84,3.845,3.17,3.57],\"y\":[175,245,180,180,180,205,215,230,150,150,245,175,264,335],\"z\":[17.02,15.84,17.4,17.6,18,17.98,17.82,17.42,16.87,17.3,15.41,17.05,14.5,14.6],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"8\",\"marker\":{\"color\":\"rgba(141,160,203,1)\",\"line\":{\"color\":\"rgba(141,160,203,1)\"}},\"textfont\":{\"color\":\"rgba(141,160,203,1)\"},\"error_y\":{\"color\":\"rgba(141,160,203,1)\"},\"error_x\":{\"color\":\"rgba(141,160,203,1)\"},\"line\":{\"color\":\"rgba(141,160,203,1)\"},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\r\nYes, plot_ly functions are pipeable! The piping here is analogous to “+” in ggplot2 syntax. The layout() is also much like the theme() in ggplot2. I will admit though, plot_ly takes time to get used to. The arguments that functions take are sometimes not as straightforward, for example, when does it need to be a list() and when does it not? Moreover, the legend title for the color scheme is hard-coded because there is no argument for specifying legend titles at the moment (at least to my knowledge).\r\nSo, in summary, I think plot_ly offers a neat way of visualizing complex data. The interactive aspect can also help make data more accessible and can be a handy pedagogical tool. However, if you’re trying to make a figure to publish in a scientific journal, this is probably an overkill.\r\nII. Making your first animation with gganimate\r\nBecause gganimate is a part of the tidverse/ggplot2 ecosystem, it should be very straightforward if you are already with familiar with either of them. The general schema of making an animation with gganimate is to:\r\nCreate a ggplot object with ALL your points plotted out.\r\nDecide how you would like the points to be animated by specifying how you would like the data to be shown over time. In the case of time-series, the “time” variable will be the index of your animation.\r\nChoose an appropriate transition function from gganimate, input your index variable (e.g. time), and simply overlay (“+”) this call to your ggplot object just as you would with adding geom_point(), geom_line(), theme()\r\nTHAT’S IT!\r\n\r\n\r\nd-article p span#aaa:before { \r\n  content: \"1. \"; \r\n  display: inline-block;\r\n  margin-left: -1.5em;\r\n  margin-right: 0.5em;\r\n}\r\n\r\nd-article p span#bbb:before { \r\n  content: \"2. \"; \r\n  display: inline-block;\r\n  margin-left: -1.5em;\r\n  margin-right: 0.5em;\r\n}\r\n\r\nd-article p span#ccc:before { \r\n  content: \"3. \"; \r\n  display: inline-block;\r\n  margin-left: -1.5em;\r\n  margin-right: 0.5em;\r\n}\r\n\r\nd-article p span#ddd:before { \r\n  content: \"4. \"; \r\n  display: inline-block;\r\n  margin-left: -1.5em;\r\n  margin-right: 0.5em;\r\n}\r\n\r\nd-article table.lightable-paper {\r\n  margin-bottom: 0px; \r\n}\r\n\r\nAs you can imagine, animations take a little time to render. So for the sake brevity, I’ll use only a subset of the gapminder dataset.\r\n\r\n\r\ngapminder_asia <- gapminder %>%\r\n  filter(continent == 'Asia')\r\n\r\n\r\n\r\n\r\nLet’s “gg”plot it out:\r\n\r\n\r\nasia_p <- gapminder_asia %>%\r\n  ggplot(aes(x = year, y = pop, group = country)) +\r\n  geom_point() +\r\n  geom_path() +\r\n  geom_text(aes(label = country), hjust = -0.3) +\r\n  scale_y_log10() +\r\n  xlim(1950, 2030) +\r\n  theme_bw()\r\n\r\nasia_p\r\n\r\n\r\n\r\n\r\nThis looks like horrible, doesn’t it? But this is what I meant by “plot it all out”. This will become clearer through the animation process though, since the points and texts of each country will only appear once at each time point. Because the line specified by geom_path is continuous (only 1 line per group), it will only “grow” as time progresses. In other words, each country will only have a single line, a single point, and a single text throughout the animation.\r\nTo make the plot an animation, simply choose an appropriate transition function from the gganimate package and add it to your ggplot. But what the heck is a transition function? Transition functions are the functions the allow you to specify how you want your plot to be animated. In most cases, all you need to provide to the function is the variable from your dataframe in which you want the animations to be indexed. For example, if we want the animations to progress over time, then we want the time-indexed variable to be our argument. Here, we’ll use the transition_reveal() function as our transition function since we are trying to visualize the temporal evolution of population size.\r\n\r\n\r\nasia_p + transition_reveal(year)\r\n\r\n\r\n\r\n\r\nAs its name suggests, transition_reveal() works by gradually “revealing” your data. The video/gif you see is really just a combination of multiple frames, and each frame consists of only data from a given year. The order of appearance is dependent on the order of your index variable (in our case, year). In some cases, it might not be time that you want to animate and a continuous animation might not be the “essence” that you want your plot to communicate. Finding the correct transition function ultimately depends on the message that you want to convey.\r\nSummary\r\nI started off by suggesting to you that 2D static plots can sometimes limit our ability to communicate the story of our data. This is because our world is multi-dimensional and dynamic! I then showed you that we can overcome some of these limitations by creating I. Interactive plots that allow you to rotate axes, thereby giving the perception of “depth”, and II. Animations that captures the “passage of time”.\r\nThrough this post, I hope I, at least slightly, highlighted the pedagogical implications of making intuitive and accessible data through thoughtful visualizations. So there you have it! May you live long and prosper 🖖\r\n\r\nI refer to dynamic here as a term that indicates change over time, recognizing that time is sometimes interpreted as another dimension↩︎\r\n",
    "preview": "posts/2021-05-26-guest-post-1-communicating-the-essence-of-your-data/../../homepage_images/Guest_post1.gif",
    "last_modified": "2021-05-27T00:53:05-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-05-07-post-2-three-ways-to-create-log-axes-in-ggplots-which-one-should-you-use/",
    "title": "Post #2. Three ways to create log axes in ggplots: which one should you use?",
    "description": "This post shows you three different ways to create log axes in ggplots and provides some suggestions on which method to use for your figures.",
    "author": [
      {
        "name": "Gen-Chang Hsu",
        "url": {}
      }
    ],
    "date": "2021-05-07",
    "categories": [
      "2021"
    ],
    "contents": "\r\n\r\n\r\nd-article a {\r\n    color: #2780e3 !important;\r\n      border-bottom: none !important;\r\n}\r\n\r\nd-article a:hover {\r\n  color: #2780e3 !important;\r\n    border-bottom: 2px solid !important;\r\n}\r\n\r\nd-byline {\r\n  margin-left: -10% !important;\r\n}\r\n\r\nd-title {\r\n  margin-left: -10%;\r\n}\r\n\r\nd-title h1{\r\n  font-size: 45px;\r\n  width: 130%;\r\n}\r\n\r\nd-article {\r\n  margin-left: -10%;\r\n}\r\n\r\np {\r\n  width: 120%;\r\n}\r\n\r\nd-article h2 {\r\n  width: 120%;\r\n}\r\n\r\ndiv.article-footer{\r\n  width: 120%;\r\n}\r\n\r\nd-article div.sourceCode { \r\n  width: 120% !important;\r\n}\r\n\r\nd-article pre { \r\n  width: 120% !important;\r\n}\r\n\r\ndiv.l-body {\r\n  width: 120% !important;\r\n}\r\n\r\nd-article table thead tr {\r\n  height: 60px !important;\r\n  width: 210px !important;\r\n}\r\n\r\nd-article table thead th {\r\n  height: 60px !important;\r\n  font-size: 22px !important;\r\n  width: 210px !important;\r\n}\r\n\r\nd-article table tbody tr td {\r\n  font-size: 21px !important;\r\n  height: 60px !important;\r\n  text-align: center !important;\r\n  width: 210px !important;\r\n}\r\n\r\nWe often have data spanning across several orders of magnitude or having skewed distributions. In either case, we might consider transforming our data, and log transformation is one of the most common data transformation techniques people use.\r\nIn ggplots, there are three different methods to do log transformation: (1) Transformation of variables  (2) Transformation of scales  (3) Transformation of coordinates\r\nYou can take a look at a brief demonstration of the three methods on this ggplot2 website. These methods share something in common, but also differ from each other in some ways, and I often find it confusing to use them (I think you might feel the same way as I do!)\r\nIn this post, I will go over these methods one by one, explain the details, and make a comprehensive comparison. Hopefully, after reading the article, you will clear up the confusions and know how which method to go for your figures!\r\nBy the way, we will be working with the famous diamonds dataset in ggplot2, which contains the price and various attributes of around 54,000 diamonds.\r\nSay we would like to see how the price of diamonds is related to the weight (carat) of diamonds. Let’s first make a scatterplot to visualize their relationship:\r\n\r\n\r\nlibrary(tidyverse)\r\n\r\nggplot(diamonds, aes(x = carat, y = price)) +\r\n  geom_point() +\r\n  theme_classic(base_size = 13)\r\n\r\n\r\n\r\n\r\nIt looks a bit over-plotted, but still you can see a seemingly non-linear positive relationship between price and carat. So we decide to log-transform the data to make the relationship more linear.\r\nMethod 1. Transformation of variables\r\nThe first method is transformation of variables. This is done by applying log() directly to the x and/or y variables in the aes():\r\n\r\n\r\nggplot(diamonds, aes(x = log10(carat), y = log10(price))) +\r\n  geom_point() +\r\n  theme_classic(base_size = 13)\r\n\r\n\r\n\r\n\r\nAs you can see, the relationship does become more linear. This method simply log-transforms the x and y variables and plot them as is, and so now the axis ticks display the transformed rather than the original values.\r\nIf we fit a line through the points using stat_smooth(), we are essentially fitting a linear model with log-transformed carat and price as the predictor and the response:\r\n\r\n\r\nggplot(diamonds, aes(x = log10(carat), y = log10(price))) +\r\n  geom_point() +\r\n  stat_smooth(method = \"lm\", se = F) + \r\n  theme_classic(base_size = 13)\r\n\r\n\r\n\r\n\r\nJust that simple and easy! Though, a minor drawback of this method is that, since the axes now represent the transformed values, the interpretation might become a bit not so straightforward (e.g., what is a diamond of -0.4 log10(carat), or a diamond with a log10(price) of around 3.5?!)\r\nMethod 2. Transformation of scales\r\nThe second method is transformation of scales. This is done by specifying the trans = argument in the scale_XXX_continuous() function:\r\n\r\n\r\nggplot(diamonds, aes(x = carat, y = price)) +\r\n  geom_point() +\r\n  scale_x_continuous(trans = \"log10\") + \r\n  scale_y_continuous(trans = \"log10\") +\r\n  theme_classic(base_size = 13)\r\n\r\n\r\n\r\n\r\nLooks pretty similar to the plot we get from the first method right? Basically, this second method does the same thing as the first one in the beginning: log-transforming the data. But then, instead of displaying the transformed vales on the axes like what the first method does, it actually converts them back into the original values. This is why you will find that the tick marks are equally-spaced yet their corresponding numbers are not equally-distanced.\r\nAgain, we fit a line using stat_smooth():\r\n\r\n\r\nggplot(diamonds, aes(x = carat, y = price)) +\r\n  geom_point() +\r\n  scale_x_continuous(trans = \"log10\") + \r\n  scale_y_continuous(trans = \"log10\") +\r\n  stat_smooth(method = \"lm\", se = F) + \r\n  theme_classic(base_size = 13)\r\n\r\n\r\n\r\n\r\nIt is important to note that the line is fitted after the log transformation of data. In other words, the line is fitted using the log-transformed carat and price as the predictor and the response (i.e., log10(price) ~ log10(carat), not price~carat !!!). So in the plot, a price of around $3,000 for a 1.0 carat diamond actually represents the back-converted predicted log10-price for that diamond.\r\nIn fact, any statistical computations (e.g., fitted line, mean, median, error bars) applied to the data will always occur AFTER the transformation of scales. That is, the statistics will be computed on the log-transformed data!\r\nMethod 3. Transformation of coordinates\r\nThe third method is transformation of coordinates. This is done by specifying the transformation for the x and/or y axis in coord_trans():\r\n\r\n\r\nggplot(diamonds, aes(x = carat, y = price)) +\r\n  geom_point() +\r\n  coord_trans(x = \"log10\", y = \"log10\") +\r\n  theme_classic(base_size = 13)\r\n\r\n\r\n\r\n\r\nYou can see that the axes display original values, same as what we have seen in the second method. But it is pretty obvious that the tick marks are not equally-spaced, different from the second method (take a quick look back at the previous plot!).\r\nIndeed, what this third method does is that it converts the original linear axes into log axes and shifts the original tick marks (which are equally-spaced with equally-distanced numbers) to the new corresponding log positions (which of course will not be equally-spaced but the corresponding numbers are still the same). As a result, the numbers on the tick marks are equally-distanced yet the tick marks themselves are not equally-spaced.\r\nNow we call stat_smooth() to fit a line:\r\n\r\n\r\nggplot(diamonds, aes(x = carat, y = price)) +\r\n  geom_point() +\r\n  stat_smooth(method = \"lm\", se = F) +\r\n  coord_trans(x = \"log10\", y = \"log10\", ylim = c(min(diamonds$price), NA)) + # Need to specify the lower limit for y-axis!\r\n  theme_classic(base_size = 13)\r\n\r\n\r\n\r\n\r\nWhat! The line is not straight?! Yup, it is not straight. Your vision is fine! So why is that?\r\nThis is because the line is fitted using the original price and carat rather than the log-transformed data (i.e., price~carat, not log10(price) ~ log10(carat) !!!), after which the predicted price is then log-transformed and drawn on the plot. So after the transformation, the line will no longer be straight.\r\nDifferent from the second method, in this third method, any statistical computations applied to the data will always occur BEFORE the transformation of coordinates. That is, the statistics will be computed on the original data and then log-transformed to be shown on the plot!\r\nNote that here I also specify the lower limit (using min price value) for y-axis. Without this, you will get an error message saying something like “missing value where TRUE/FALSE needed”. The line is fitted using the original carat and price as the predictor and the response, and in this example we have some non-positive predicted values. These non-positive values are the culprit: the error arises when ggplot attempts to take log of them (remember the computed statistics will be log-transformed to be drawn on the plot)!\r\n\r\n\r\nlm_diamonds <- lm(price~carat, data = diamonds)\r\npredict(lm_diamonds) %>% head() # Non-positive predicted values exist\r\n\r\n\r\n          1           2           3           4           5 \r\n-472.382688 -627.511200 -472.382688   -6.997151  148.131362 \r\n          6 \r\n-394.818432 \r\n\r\npredict(lm_diamonds) %>% log10() %>% head() # NaNs produced when you take log of the non-positive values \r\n\r\n\r\n       1        2        3        4        5        6 \r\n     NaN      NaN      NaN      NaN 2.170647      NaN \r\n\r\nFor the second method (transformation of scales), in which the line is fitted and drawn after log transformation, there is no such problem because the predicted values (of course can be non-positive) do not need to undergo transformation again, and so you will always get a straight line!\r\nWhich transformation method to use?\r\nStill confused? In the following table, I summarize the similarities/differences among the three log transformation methods we have discussed:\r\n\r\n\r\n\r\n\r\nTransformation of variables\r\n\r\n\r\nTransformation of scales\r\n\r\n\r\nTransformation of coordinates\r\n\r\n\r\nAxis values\r\n\r\n\r\nTransformed\r\n\r\n\r\nOriginal\r\n\r\n\r\nOriginal\r\n\r\n\r\nAxis tick marks\r\n\r\n\r\nEqually-spaced\r\n\r\n\r\nEqually-spaced\r\n\r\n\r\nNot equally-spaced\r\n\r\n\r\nNumbers on tick marks\r\n\r\n\r\nEqually-distanced\r\n\r\n\r\nNot equally-distanced\r\n\r\n\r\nEqually-distanced\r\n\r\n\r\nStatistical computations\r\n\r\n\r\nAfter transformation\r\n\r\n\r\nAfter transformation\r\n\r\n\r\nBefore transformation\r\n\r\n\r\nShape of geoms\r\n\r\n\r\nNot affected\r\n\r\n\r\nNot affected\r\n\r\n\r\nMight be affected*\r\n\r\n\r\n*E.g., the fitted straight line becomes curved.\r\n And here is a simple dichotomous key to which method to use for your figures (of course it is my opinion, not the standard rule!):\r\nYou are fine with log-transformed axis values…………………….. Method 1\r\nYou want your axis to display original values…………………………………2\r\nYou want to preserve the shape of geoms and it is okay for the statistics to be computed on the log-transformed data (geom-focused)………Method 2\r\nYou want the statistics to be computed on the original data and it is okay to have the shape of geoms altered (stat-focused)…………………..Method 3\r\n\r\n\r\nd-article p span#aaa:before { \r\n  content: \"1a. \"; \r\n  display: inline-block;\r\n  margin-left: -2em;\r\n  margin-right: 0.5em;\r\n}\r\n\r\nd-article p span#bbb:before { \r\n  content: \"1b. \"; \r\n  display: inline-block;\r\n  margin-left: -2em;\r\n  margin-right: 0.5em;\r\n}\r\n\r\nd-article p span#ccc:before { \r\n  content: \"2a. \"; \r\n  display: inline-block;\r\n  margin-left: -2em;\r\n  margin-right: 0.5em;\r\n}\r\n\r\nd-article p span#ddd:before { \r\n  content: \"2b. \"; \r\n  display: inline-block;\r\n  margin-left: -2em;\r\n  margin-right: 0.5em;\r\n}\r\n\r\nd-article table.lightable-paper {\r\n  margin-bottom: 0px; \r\n}\r\n\r\nThis is the end of this rather long post. Hooray! Hope it is worth the time and you do learn something useful. And as always, don’t forget to leave your comments and suggestions below if you have any!\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-05-07-post-2-three-ways-to-create-log-axes-in-ggplots-which-one-should-you-use/../../homepage_images/Post2.png",
    "last_modified": "2021-05-27T02:02:29-07:00",
    "input_file": {},
    "preview_width": 960,
    "preview_height": 576
  },
  {
    "path": "posts/2021-05-01-post-1-center-long-legend-titles-in-ggplots/",
    "title": "Post #1. Center long legend titles in ggplots",
    "description": "In this post, I will show you a simple quick hack to center long legend titles in ggplots without bothering gtables and grobs.",
    "author": [
      {
        "name": "Gen-Chang Hsu",
        "url": {}
      }
    ],
    "date": "2021-05-01",
    "categories": [
      "2021"
    ],
    "contents": "\r\n\r\n\r\nd-article a {\r\n    color: #2780e3 !important;\r\n    border-bottom: none !important;\r\n}\r\n\r\nd-article a:hover {\r\n    color: #2780e3 !important;\r\n    border-bottom: 2px solid !important;\r\n}\r\n\r\nd-byline {\r\n    margin-left: -10% !important;\r\n}\r\n\r\nd-title {\r\n    margin-left: -10%;\r\n}\r\n\r\nd-title h1{\r\n    font-size: 45px;\r\n    width: 130%;\r\n}\r\n\r\nd-article {\r\n    margin-left: -10%;\r\n}\r\n\r\np {\r\n    width: 120%;\r\n}\r\n\r\nd-article h2 {\r\n    width: 120%;\r\n}\r\n\r\ndiv.article-footer{\r\n    width: 120%;\r\n}\r\n\r\nd-article div.sourceCode { \r\n    width: 120% !important;\r\n}\r\n\r\nd-article pre { \r\n    width: 120% !important;\r\n}\r\n\r\ndiv.l-body {\r\n    width: 120% !important;\r\n}\r\n\r\nBefore we start\r\n“Blogenesis”! This is the origin of my first ggGallery blog post! Feel excited to write about something in which I am interested. This very first post is a simple one, but I bet it will be pretty handy. Hope you learn something from this post. Most importantly, enjoy the reading!\r\nThe problem\r\nWhen making a ggplot with legend, the legend title is left-aligned by default:\r\n\r\n\r\nlibrary(tidyverse)\r\n\r\nggplot(mtcars, aes(wt, mpg)) + \r\n  geom_point(aes(colour = factor(cyl))) + \r\n  geom_smooth(aes(colour = factor(cyl)), method = \"lm\", se = F) +\r\n  scale_color_discrete(name = \"Cyl\", \r\n                       label = c(\"Four\", \"Six\", \"Eight\")) + \r\n  theme_classic(base_size = 13)\r\n\r\n\r\n\r\n\r\nIf you are happy with it, then fine. But oftentimes, we would like to align the legend title to the center so that the legend looks more balanced. For short titles, this is easy to achieve, just use theme(legend.title.align = 0.5):\r\n\r\n\r\nggplot(mtcars, aes(wt, mpg)) + \r\n  geom_point(aes(colour = factor(cyl))) + \r\n  geom_smooth(aes(colour = factor(cyl)), method = \"lm\", se = F) +\r\n  scale_color_discrete(name = \"Cyl\", \r\n                       label = c(\"Four\", \"Six\", \"Eight\")) + \r\n  theme_classic(base_size = 13) + \r\n  theme(legend.title.align = 0.5) # Align the title to the center\r\n\r\n\r\n\r\n\r\nHowever, for legend titles that are longer than the legend keys and labels, this method does not work:\r\n\r\n\r\nggplot(mtcars, aes(wt, mpg)) + \r\n  geom_point(aes(colour = factor(cyl))) + \r\n  geom_smooth(aes(colour = factor(cyl)), method = \"lm\", se = F) +\r\n  scale_color_discrete(name = \"Number of cylinders\", \r\n                       label = c(\"Four\", \"Six\", \"Eight\")) + \r\n  theme_classic(base_size = 13) + \r\n  theme(legend.title.align = 0.5) # Not work!\r\n\r\n\r\n\r\n\r\nThere is a solution to this problem on stackoverflow. Basically, what it does is to extract the individual elements from the legend grobs, add extra space, and finally piece them back together. This method really delves into the heart of ggplots, but such “brute force” method might require quite a bit of time as well as decent understandings of how ggplot legends is built.\r\nSo isn’t there a simpler and more elegant way to do so?\r\nThe hack\r\nThe answer to this question is a complete no-brainer: Yes! Otherwise, I will not be writing this blog, right?! Here is the hack: just use “negative” left margin around the legend title:\r\n\r\n\r\nggplot(mtcars, aes(wt, mpg)) + \r\n  geom_point(aes(colour = factor(cyl))) + \r\n  geom_smooth(aes(colour = factor(cyl)), method = \"lm\", se = F) +\r\n  scale_color_discrete(name = \"Number of cylinders\", \r\n                       label = c(\"Four\", \"Six\", \"Eight\")) + \r\n  theme_classic(base_size = 13) + \r\n  theme(legend.title = element_text(margin = margin(l = -25))) # Negative left margin\r\n\r\n\r\n\r\n\r\nNow the title lies nicely in the center of the legend. Hooray!\r\nThe explanation\r\nSo how does negative margin work? Let’s visualize it by showing the legend box border. By default, there is no margin around the title, which will fit just right within the box border:\r\n\r\n\r\n# Default left margin\r\nggplot(mtcars, aes(wt, mpg)) + \r\n  geom_point(aes(colour = factor(cyl))) + \r\n  geom_smooth(aes(colour = factor(cyl)), method = \"lm\", se = F) +\r\n  scale_color_discrete(name = \"Number of cylinders\", \r\n                       label = c(\"Four\", \"Six\", \"Eight\")) + \r\n  theme_classic(base_size = 13) + \r\n  theme(legend.title = element_text(margin = margin(l = 0)), \r\n        legend.background = element_rect(color = \"black\")) +\r\n  labs(title = \"Default margin\")\r\n\r\n\r\n\r\n\r\nIf you specify a positive left margin, then there will be extra space added between the title and left box border:\r\n\r\n\r\n# Positive left margin\r\nggplot(mtcars, aes(wt, mpg)) + \r\n  geom_point(aes(colour = factor(cyl))) + \r\n  geom_smooth(aes(colour = factor(cyl)), method = \"lm\", se = F) +\r\n  scale_color_discrete(name = \"Number of cylinders\", \r\n                       label = c(\"Four\", \"Six\", \"Eight\")) + \r\n  theme_classic(base_size = 13) + \r\n  theme(legend.title = element_text(margin = margin(l = 25)),\r\n        legend.background = element_rect(color = \"black\")) +\r\n  labs(title = \"Positive left margin\")\r\n\r\n\r\n\r\n\r\nBut if you specify a negative margin, then you are asking ggplot to add some “negative” space between the title and left box border, and what that means is that ggplot will “pull” the title toward left beyond the box border:\r\n\r\n\r\n# Negative left margin\r\nggplot(mtcars, aes(wt, mpg)) + \r\n  geom_point(aes(colour = factor(cyl))) + \r\n  geom_smooth(aes(colour = factor(cyl)), method = \"lm\", se = F) +\r\n  scale_color_discrete(name = \"Number of cylinders\", \r\n                       label = c(\"Four\", \"Six\", \"Eight\")) + \r\n  theme_classic(base_size = 12) + \r\n  theme(legend.title = element_text(margin = margin(l = -25)),\r\n        legend.background = element_rect(color = \"black\")) +\r\n  labs(title = \"Negative left margin\")\r\n\r\n\r\n\r\n\r\nAnd after removing the box border, you will find that the title just moves to the center of the legend!\r\nFinally, I think you might ask: what negative margin value should I specify? The answer is: it depends! It really depends on the relative length of your title to your legend keys and labels, and so you might need to try out a few different values and see how it goes. Though this might seem a bit tedious, it offers you the most flexibility to place your title at the exact position you desire. It is worth the effort!\r\nDefinitely try this tip out next time. And if you have any further ideas or questions, don’t forget to leave them below!\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-05-01-post-1-center-long-legend-titles-in-ggplots/../../homepage_images/Post1.png",
    "last_modified": "2021-05-27T02:03:32-07:00",
    "input_file": {},
    "preview_width": 1152,
    "preview_height": 672
  }
]
