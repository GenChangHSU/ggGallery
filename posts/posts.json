[
  {
    "path": "posts/2021-08-02-post-6-play-good-music-for-your-data-violin-plots-with-ggplot/",
    "title": "Post #6. Play good music for your data - violin plots with ggplot",
    "description": "Visualize data distributions using violin plots with ggplot.",
    "author": [
      {
        "name": "Gen-Chang Hsu",
        "url": {}
      }
    ],
    "date": "2021-08-02",
    "categories": [
      "2021"
    ],
    "contents": "\r\n\r\n\r\nd-article a {\r\n    color: #2780e3 !important;\r\n    border-bottom: none !important;\r\n}\r\n\r\nd-article a:hover {\r\n    color: #2780e3 !important;\r\n    border-bottom: 2px solid !important;\r\n}\r\n\r\nd-byline {\r\n    margin-left: -10% !important;\r\n}\r\n\r\nd-title {\r\n    margin-left: -10%;\r\n}\r\n\r\nd-title h1{\r\n    font-size: 45px;\r\n    width: 130%;\r\n}\r\n\r\nd-article {\r\n    margin-left: -10%;\r\n}\r\n\r\np {\r\n    width: 120%;\r\n}\r\n\r\nd-article h2 {\r\n    width: 120%;\r\n}\r\n\r\nd-article h3 {\r\n  width: 120%;\r\n  font-size: 28px;\r\n}\r\n\r\ndiv.article-footer{\r\n    width: 120%;\r\n}\r\n\r\nd-article div.sourceCode { \r\n    width: 120% !important;\r\n}\r\n\r\nd-article pre { \r\n    width: 120% !important;\r\n}\r\n\r\ndiv.l-body {\r\n    width: 120% !important;\r\n}\r\n\r\nIntroduction\r\nData exploration is the very first step for any data analysis project, allowing us to grasp an idea of what our data look like before proceeding to further analyses. We can use some simple summary statistics (e.g., mean, SD, the five-number summary 1) to do so. Alternatively, we can plot the data to really show their “true colors” and potentially uncover some interesting/weird patterns (to see is to believe right?!). This is especially handy for large datasets where it is difficult to inspect each data point.\r\nThere are quite a few types of graphs we can use to visualize the distribution of (continuous) data. In this post, I will show you some commonly-used graphs, first the basic ones (strip plot, box plot, and point-range plot), and then to our focus—the violin plot.\r\nSome basic visualizations for data distributions\r\nWe will be using the crabs dataset from the MASS package as our example data. This dataset contains five morphological measurements (frontal lobe size, rear width, carapace length, carapace width, and body depth) of 50 purple rock crab (Leptograpsus variegatus) individuals for each of the two color forms (blue and orange) and sexes (male and female). An interesting question here is whether the carapace width, an important indicator for individuals’ growth and development, differ between sexes for the two color forms. Before conducting formal statistical tests, it would be great to first visualize the carapace width by color form and sex so that we can get an idea of what the data look like.\r\nLet’s begin with some basic and most-commonly used graphs:\r\n (1) Strip plot  (2) Box plot  (3) Point-range plot\r\n(1) Strip plot\r\nA strip plot is no more than drawing the raw data points along the axis to show their distribution and range. In fact, it is simply a special version of scatterplot where one dimension (usually x-axis) is fixed to one or a few positions.\r\n\r\n\r\nlibrary(MASS)  # For the \"crabs\" dataset\r\nlibrary(tidyverse)\r\n\r\ncrabs_df <- crabs %>%\r\n  select(sp, sex, CW) %>%\r\n  transmute(color = case_when(sp == \"B\" ~ \"Blue\",\r\n                              sp == \"O\" ~ \"Orange\"),\r\n            sex = case_when(sex == \"M\" ~ \"Male\",\r\n                            sex == \"F\" ~ \"Female\"),\r\n            carapace_width = CW)\r\n\r\nggplot(data = crabs_df, aes(x = color, y = carapace_width, color = sex)) + \r\n  geom_point(position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.7)) + \r\n  scale_color_brewer(palette = \"Set1\") +\r\n  labs(x = \"Color form\", y = \"Carapace width (mm)\") + \r\n  theme_classic() + \r\n  theme(legend.title = element_text(hjust = 0.5))\r\n\r\n\r\n\r\n\r\nHere I use position_jitterdodge() to dodge the points for the two sexes within each color form so that they won’t overlap with each other at the same x-axis position, and also to jitter the points (i.e., adding some random noise) within each sex to prevent overplotting (points lying on top of each other).\r\nAs you can see, blue males tend have a wider carapace than blue females, whereas orange males and females seem to have similar carapace widths.\r\n(2) Box plot\r\nA common alternative to strip plot is the box plot, where the data are displayed as a box and two whiskers based on the five-number summary (remember this term in the “Introduction”?).\r\n\r\n\r\nggplot(data = crabs_df, aes(x = color, y = carapace_width, color = sex)) + \r\n  geom_boxplot(position = position_dodge(width = 0.7), width = 0.5) + \r\n  scale_color_brewer(palette = \"Set1\") +\r\n  labs(x = \"Color form\", y = \"Carapace width (mm)\") + \r\n  theme_classic() + \r\n  theme(legend.title = element_text(hjust = 0.5))\r\n\r\n\r\n\r\n\r\nWe can see that the median carapace width of blue males is larger than that of the blue females, while the opposite is true for the orange form.\r\n(3) Point-range plot\r\nYet another alternative to strip plot is the point-range plot, where the data are displayed as a mean and some measure of uncertainty (e.g., SD, SE, and confidence interval).\r\n\r\n\r\nggplot(data = crabs_df, aes(x = color, y = carapace_width, color = sex)) + \r\n  stat_summary(geom = \"pointrange\", fun.data = \"mean_se\", position = position_dodge(width = 0.5)) +  # The bars represent SE \r\n  scale_color_brewer(palette = \"Set1\") +\r\n  labs(x = \"Color form\", y = \"Carapace width (mm)\") + \r\n  theme_classic() + \r\n  theme(legend.title = element_text(hjust = 0.5))\r\n\r\n\r\n\r\n\r\nApparently, blue males are on average wider than blue females and vice versa for the orange form.\r\n\r\nViolin plot\r\nNow let’s get down to our main topic—the violin plot. A violin plot displays the kernel density estimates of the data as two symmetrical probability curves, forming a violin-like area and hence the name.\r\nA violin plot provides more information than a box plot or a point-range plot does, as it shows the full distribution of the data rather than just a few summary statistics. In particular, when the data distribution is bi-modal or multi-modal (i.e., more than one peak), a violin plot can show the positions of the peaks as well as their relative magnitudes, which are otherwise not revealed by a box plot or a point-range plot.\r\nThere is a trade-off though. Depending on the data, the probability curves can actually be quite curly and you might want to dispose of the “malformed” violin if that’s the case.\r\nTo make a violin plot with ggplot, simply use the ggplot2 built-in function geom_violin():\r\n\r\n\r\nggplot(data = crabs_df, aes(x = color, y = carapace_width, color = sex)) + \r\n  geom_violin(position = position_dodge(width = 0.7), width = 0.5) + \r\n  scale_color_brewer(palette = \"Set1\") +\r\n  labs(x = \"Color form\", y = \"Carapace width (mm)\") + \r\n  theme_classic() + \r\n  theme(legend.title = element_text(hjust = 0.5))\r\n\r\n\r\n\r\n\r\nThis violin plot looks a bit plain. We can modify some arguments in geom_violin() to make it more appealing. For example, we can turn off the trim argument to allow for full density curves beyond the data range, add lines inside the violins to denote the quartiles, and fill the empty violins with some colors to make them more “concrete”.\r\n\r\n\r\nggplot(data = crabs_df, aes(x = color, y = carapace_width, color = sex)) + \r\n  geom_violin(position = position_dodge(width = 0.7), \r\n              width = 0.5,\r\n              size = 1,  # Thicker lines\r\n              trim = F,  # Don't trim off the tails of density curves beyond data range\r\n              scale = \"area\",  # All violins have the same area size \r\n              draw_quantiles = c(0.25, 0.5, 0.75),  # Add quartiles to the violins\r\n              fill = alpha(\"grey\", 0.3)) +  # Fill the violins\r\n  scale_color_brewer(palette = \"Set1\") +\r\n  labs(x = \"Color form\", y = \"Carapace width (mm)\") + \r\n  theme_classic() + \r\n  theme(legend.title = element_text(hjust = 0.5))\r\n\r\n\r\n\r\n\r\nAn important aspect of a violin plot is the density curves, determined by two factors: bandwidth and kernel (this is a bit mathy; see this post for details if interested). Bandwidth is the easier (and also straightforward) one to adjust. It is a real positive number and controls the smoothness of the density estimates: a smaller value gives a “spikier” curve, whereas a larger value results in a “smoother” look.\r\n\r\n\r\nmap(c(0.5, 1, 2, 5), function(bw_values){  # Pass a set of bandwidth values to the ggplot\r\nggplot(data = crabs_df, aes(x = color, y = carapace_width, color = sex)) + \r\n  geom_violin(position = position_dodge(width = 0.7), \r\n              width = 0.5,\r\n              size = 1,  \r\n              trim = F,\r\n              scale = \"area\",\r\n              draw_quantiles = c(0.25, 0.5, 0.75),\r\n              fill = alpha(\"grey\", 0.3),\r\n              bw = bw_values) +  # Control the bandwidth\r\n  scale_color_brewer(palette = \"Set1\") +\r\n  labs(x = \"Color form\", y = \"Carapace width (mm)\", title = paste0(\"Bandwidth = \", bw_values)) + \r\n  guides(color = \"none\") +\r\n  theme_classic(base_size = 12) + \r\n  theme(legend.title = element_text(hjust = 0.5),\r\n        plot.title = element_text(hjust = 0.5, size = 15))\r\n})\r\n\r\n\r\n\r\n\r\nDepending on the nature of the data, you might want to try out a few bandwidth values and see which one best captures the data distribution. Or, you can just do nothing and let ggplot pick a default one for you!\r\n\r\nVariants of violin plots\r\nLet’s now go a bit further and take a look at some cool variants of violin plots.\r\n(1) Overlay other plot types\r\nWe can add strip plots, box plots, or point-range plots to the violin plots to show more information about the data.\r\n\r\n\r\n### Violin plot + strip plot\r\nggplot(data = crabs_df, aes(x = color, y = carapace_width, color = sex)) + \r\n  geom_violin(position = position_dodge(width = 0.7), \r\n              width = 0.7,\r\n              size = 1,\r\n              trim = F,\r\n              scale = \"area\") +\r\n  geom_point(position = position_jitterdodge(jitter.width = 0.05, dodge.width = 0.7), show.legend = FALSE) +\r\n  scale_color_brewer(palette = \"Set1\") +\r\n  labs(x = \"Color form\", y = \"Carapace width (mm)\") + \r\n  theme_classic() + \r\n  theme(legend.title = element_text(hjust = 0.5))\r\n\r\n### Violin plot + box plot\r\nggplot(data = crabs_df, aes(x = color, y = carapace_width, color = sex)) + \r\n  geom_violin(position = position_dodge(width = 0.7), \r\n              width = 0.7,\r\n              size = 1,\r\n              trim = F,\r\n              scale = \"area\") +\r\n  geom_boxplot(position = position_dodge(width = 0.7), width = 0.2, show.legend = FALSE) +\r\n  scale_color_brewer(palette = \"Set1\") +\r\n  labs(x = \"Color form\", y = \"Carapace width (mm)\") + \r\n  theme_classic() + \r\n  theme(legend.title = element_text(hjust = 0.5))\r\n\r\n### Violin plot + point-range plot\r\nggplot(data = crabs_df, aes(x = color, y = carapace_width, color = sex)) + \r\n  geom_violin(position = position_dodge(width = 0.7), \r\n              width = 0.7,\r\n              size = 1,\r\n              trim = F,\r\n              scale = \"area\") +\r\n  stat_summary(geom = \"pointrange\", \r\n               fun = mean, \r\n               fun.min = function(x) mean(x) - sd(x),  # The bars represent SD\r\n               fun.max = function(x) mean(x) + sd(x),\r\n               position = position_dodge(width = 0.7), show.legend = FALSE) +\r\n  scale_color_brewer(palette = \"Set1\") +\r\n  labs(x = \"Color form\", y = \"Carapace width (mm)\") + \r\n  theme_classic() + \r\n  theme(legend.title = element_text(hjust = 0.5))\r\n\r\n\r\n\r\n\r\n(2) Hybrid violin plot\r\nWhen there are two groups (violins) within each x-axis category (e.g., “male” and “female” in this example), we can halve the two violins and combine them into one hybrid violin for a better comparison.\r\nThere is no direct function or argument to create a hybrid violin plot, and so we would need to code it a bit: first compute the kernel density estimates manually, then do some data manipulations, and finally map the processed data to the plot. I have wrapped these steps into a function called geom_hybrid_violin(). See the comments in the below code chuck for what the functions actually does under the hood!\r\nBy the way, there is also a function called geom_split_violin() on stackoverflow. It is basically an extended geom of the original geom_violin(), built using the ggproto system (quite an advanced topic; saved for future posts!). You can simply copy and paste the code into your R session and it is ready for use.\r\n\r\n\r\n### Create the function \"geom_hybrid_violin()\"\r\ngeom_hybrid_violin <- function(data,  # A dataset you would like to visualize\r\n                               x_var,  # An unquoted name of the (categorical) variable for the x-axis \r\n                               hybrid_var, # An unquoted name of the (binary) variable of which the two levels are to be compared with each other\r\n                               y_var,  # An unquoted name of the (continuous) variable of which the distribution is to be visualized \r\n                               bandwidth = NULL,  # A real positive number specifying the bandwidth for kernel density estimates\r\n                               width_adj = 1,  # A real positive number multiplied with the density estimates to adjust the width of the violins (1 means no adjustment)\r\n                               x_lab,  # A quoted string as x-axis label\r\n                               y_lab){  # A quoted string as y-axis label\r\n  \r\n  # Step 1. Quote the arguments\r\n  x_var <- enquo(x_var)\r\n  hybrid_var <- enquo(hybrid_var)\r\n  y_var <- enquo(y_var)\r\n  \r\n  # Step 2. Convert the x_var and hybrid_var into factors\r\n  # The \"!!\" (pronounced \"bang bang\") symbol is to unquote the variables so that they can be evaluated in a non-standard way \r\n  data_fct <- data %>% mutate(!!x_var := as.factor(!!x_var),\r\n                              !!hybrid_var := as.factor(!!hybrid_var))\r\n  \r\n  # Step 3. Get the levels of the x_var and hybrid_var\r\n  x_var_levels <- select(data_fct, !!x_var) %>% pull() %>% levels()\r\n  hybrid_var_levels <- select(data_fct, !!hybrid_var) %>% pull() %>% levels()\r\n  \r\n  # Step 4. Compute kernel density estimates by x_vars and hybrid_var\r\n  dens_df <- data_fct %>% \r\n    group_by(!!x_var, !!hybrid_var) %>%\r\n    summarize(prob_raw = ifelse(is.null(bandwidth), list(density(!!y_var)$y), list(density(!!y_var, bw = bandwidth)$y)),\r\n              y = ifelse(is.null(bandwidth), list(density(!!y_var)$x), list(density(!!y_var, bw = bandwidth)$x))) %>%\r\n    unnest(cols = c(prob_raw, y)) %>%\r\n    mutate(prob_adj = prob_raw*width_adj,  # Multiply the original density estimates by a constant to adjust the violin width\r\n           prob_flip = ifelse(!!hybrid_var == hybrid_var_levels[1], prob_adj*-1, prob_adj),  # Flip the curve of the density estimates for the level on the right-hand side\r\n           prob_final = prob_flip + as.numeric(!!x_var))  # Spread out the density estimates for each level of x_var according to the order in which they appear along the x-axis\r\n\r\n  # Step 5. Plot the data using geom_polygon\r\n  p <- ggplot(data = dens_df, aes(x = prob_final, y = y, \r\n                                  color = !!hybrid_var, \r\n                                  fill = after_scale(alpha(color, 0.8)), \r\n                                  group = interaction(!!x_var, !!hybrid_var))) +\r\n    geom_polygon() + \r\n    scale_color_brewer(palette = \"Set1\") +\r\n    scale_fill_brewer(palette = \"Set1\") +\r\n    scale_x_continuous(limits = c(0.5, length(x_var_levels)+0.5), breaks = 1:length(x_var_levels), labels = x_var_levels) +  # Specify the positions along the x-axis at which the violins are displayed\r\n    labs(x = x_lab, y = y_lab) + \r\n    theme_classic() + \r\n    theme(legend.title = element_text(hjust = 0.5))\r\n\r\nreturn(p)\r\n  \r\n}\r\n\r\n### Pass the data to the function and specify the arguments\r\ngeom_hybrid_violin(data = crabs_df, \r\n                   x_var = color, \r\n                   hybrid_var = sex, \r\n                   y_var = carapace_width,\r\n                   bandwidth = 2,\r\n                   width_adj = 3,\r\n                   x_lab = \"Color form\",\r\n                   y_lab = \"Carapace width (mm)\")\r\n\r\n\r\n\r\n\r\n(3) Wilkinson dot plot and beeswarm plot\r\nInstead of showing the data distribution as curves and areas, we can use dots to represent the density estimates. This kind of plot is called a “Wilkinson dot plot” or a “beeswarm plot” (it does look like a swarm of bees!). In fact, it is a modified strip plot and you can think of it as the “discrete” version of the violin plot.\r\nThere are two ways for creating a Wilkinson dot plot or a beeswarm plot: one is using the ggplot2 built-in function geom_dotplot(), and the other is the geom_beeswarm() or geom_quasirandom() from the extension package ggbeeswarm.\r\n\r\n\r\n### geom_dotplot()\r\nggplot(data = crabs_df, aes(x = color, y = carapace_width, color = sex, fill = sex)) + \r\n  geom_dotplot(binaxis = \"y\", stackdir = \"center\", position = position_dodge(width = 0.8), dotsize = 0.7) +\r\n  scale_color_brewer(palette = \"Set1\") +\r\n  scale_fill_brewer(palette = \"Set1\") +\r\n  labs(x = \"Color form\", y = \"Carapace width (mm)\", title = \"geom_dotplot()\") + \r\n  theme_classic() + \r\n  theme(legend.title = element_text(hjust = 0.5),\r\n        plot.title = element_text(hjust = 0.5, size = 15))\r\n\r\n### geom_beeswarm()\r\n# install.packages(\"ggbeeswarm\")\r\nlibrary(ggbeeswarm)\r\nggplot(data = crabs_df, aes(x = color, y = carapace_width, color = sex, fill = sex)) + \r\n  geom_beeswarm(cex = 2.5, dodge.width = 0.8, size = 2) +\r\n  scale_color_brewer(palette = \"Set1\") +\r\n  labs(x = \"Color form\", y = \"Carapace width (mm)\", title = \"geom_beeswarm()\") + \r\n  theme_classic() + \r\n  theme(legend.title = element_text(hjust = 0.5),\r\n        plot.title = element_text(hjust = 0.5, size = 15))\r\n\r\n### geom_quasirandom() with bandwidth = 0.1\r\nggplot(data = crabs_df, aes(x = color, y = carapace_width, color = sex, fill = sex)) + \r\n  geom_quasirandom(bandwidth = 0.1, nbins = 100, cex = 2, dodge.width = 0.8, method = \"smiley\") +\r\n  scale_color_brewer(palette = \"Set1\") +\r\n  labs(x = \"Color form\", y = \"Carapace width (mm)\", title = \"geom_quasirandom() \\n (bandwidth = 0.1)\") + \r\n  theme_classic() + \r\n  theme(legend.title = element_text(hjust = 0.5),\r\n        plot.title = element_text(hjust = 0.5, size = 15))\r\n\r\n### geom_quasirandom() with bandwidth = 2\r\nggplot(data = crabs_df, aes(x = color, y = carapace_width, color = sex, fill = sex)) + \r\n  geom_quasirandom(bandwidth = 2, nbins = 100, cex = 2, dodge.width = 0.8, method = \"smiley\") +\r\n  scale_color_brewer(palette = \"Set1\") +\r\n  labs(x = \"Color form\", y = \"Carapace width (mm)\", title = \"geom_quasirandom() \\n (bandwidth = 2)\") + \r\n  theme_classic() + \r\n  theme(legend.title = element_text(hjust = 0.5),\r\n        plot.title = element_text(hjust = 0.5, size = 15))\r\n\r\n\r\n\r\n\r\nSimilar to geom_violin(), you can specify the bandwidth in geom_quasirandom() to adjust the “smoothness” of the swarm.\r\nSummary\r\nIn this post, we have seen some basic graph types as well as the violin plot and its extensions for visualizing data distributions. Violin plots can be quite useful for conveying the message in the data; however, they are much less popular in scientific communication (compared with strip plots or box plots). Believe it or not, I didn’t even hear of “violin plot” until I started learning ggplots!\r\nYou can make a plain violin plot more informative by combining other graph types to display different aspects of the data. Just don’t overdo it as the information can be too rich and perhaps obscured. Experiment a bit and find the right balance. Your data will appreciate you if you play a beautiful piece of music for them!\r\nThat’s it for this post and don’t forget to leave your comments and suggestions below if you have any!\r\n\r\nThe five-number summary is set of descriptive statistics consisting of the minimum value, the lower quartile (Q1), the median (Q2), the upper quartile (Q3), and the maximum value.↩︎\r\n",
    "preview": "posts/2021-08-02-post-6-play-good-music-for-your-data-violin-plots-with-ggplot/../../homepage_images/Post6.png",
    "last_modified": "2021-08-11T06:57:41-07:00",
    "input_file": {},
    "preview_width": 960,
    "preview_height": 576
  },
  {
    "path": "posts/2021-07-10-post-5-awesome-text-display-with-ggtext/",
    "title": "Post #5. Awesome text displays with ggtext",
    "description": "Enhance text displays in your ggplots with the extension package ggtext!",
    "author": [
      {
        "name": "Gen-Chang Hsu",
        "url": {}
      }
    ],
    "date": "2021-07-10",
    "categories": [
      "2021"
    ],
    "contents": "\r\n\r\n\r\nd-article a {\r\n    color: #2780e3 !important;\r\n    border-bottom: none !important;\r\n}\r\n\r\nd-article a:hover {\r\n    color: #2780e3 !important;\r\n    border-bottom: 2px solid !important;\r\n}\r\n\r\nd-byline {\r\n    margin-left: -10% !important;\r\n}\r\n\r\nd-title {\r\n    margin-left: -10%;\r\n}\r\n\r\nd-title h1{\r\n    font-size: 45px;\r\n    width: 130%;\r\n}\r\n\r\nd-article {\r\n    margin-left: -10%;\r\n}\r\n\r\np {\r\n    width: 120%;\r\n}\r\n\r\nd-article h2 {\r\n    width: 120%;\r\n}\r\n\r\nd-article h3 {\r\n  width: 120%;\r\n  font-size: 28px;\r\n}\r\n\r\ndiv.article-footer{\r\n    width: 120%;\r\n}\r\n\r\nd-article div.sourceCode { \r\n    width: 120% !important;\r\n}\r\n\r\nd-article pre { \r\n    width: 120% !important;\r\n}\r\n\r\ndiv.l-body {\r\n    width: 120% !important;\r\n}\r\n\r\nOverview\r\nText is one of the fundamental elements in a graph. A well-designed text display can make your plot look pleasant and more informative. ggplot2 provides many functions and arguments for text manipulation (appearance, layout, annotation, etc.), which are already more than enough most of the time. But if you want to do something further, the extension package ggtext has more to offer. This package has several added functionalities currently not implemented in ggplot2, the most important being that it supports the use of Markdown/HTML/CSS, which offers greater flexibility in text rendering. So in this post, I will be showing you some of these cool features. Ready? Let’s get started!\r\nDate preparation\r\nWe will be using the data from the International Biology Olympiad website. IBO is arguably the largest annual biology event for high school students. Each year, a member country will host the competition, and students around the world will gather to participate in this great event. Since the very first IBO held in 1990 in the Czech Republic, more countries have joined as members, and it would be interesting to see how the numbers of participating students changed over the past three decades.\r\nTo do so, we will first scrap the data from the website using the package rvest, and then do some data manipulation for later plotting use. Since web-scraping is not the main focus of this post, I will not go into the details. If interested, you can visit the package’s website for more information. There are also plenty of learning resources out there on the internet.\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(rvest)\r\n\r\n# The website url\r\nIBO_url <- \"https://www.ibo-info.org/en/contest/past-ibos.html\"\r\n\r\n# Read the html and select elements using css selectors\r\nIBO_html <- read_html(IBO_url) %>%\r\n  html_elements(\"div.item__content\") %>%\r\n  html_text2()\r\n\r\n# Extract the information from the html text\r\nYear <- IBO_html %>% str_extract(\"[:digit:]{4}(?=:)\")\r\n\r\nCountry <- IBO_html %>% str_extract(\"(?<=,\\\\s)[:alpha:]+[:blank:]*[:alpha:]*\") %>%\r\n  replace_na(\"Japan\")\r\n\r\nStudents <- IBO_html %>% str_extract(\"[:digit:]*(?=\\\\s*students)\")\r\n\r\n# Put all information in a dataframe  \r\nIBO_data <- tibble(Year, Country, Students) %>%\r\n  mutate(Year = as.numeric(Year),\r\n         Students = as.numeric(Students)) %>%\r\n  filter(Year %in% 1990:2020)  # Use data only from 1990 to 2020\r\n\r\n\r\n\r\n\r\nThe basic plot\r\nNow we have our dataset at hand. It’s time to visualize it using a simple line chart:\r\n\r\n\r\nggplot(IBO_data, aes(x = Year, y = Students)) + \r\n  geom_point() + \r\n  geom_line() + \r\n  labs(y = \"Number of participants\") +\r\n  theme_classic() \r\n\r\n\r\n\r\n\r\nAs you can see, the number of participants had generally increased over time, but there was a sharp drop in 2020 due to the COVID-19 global pandemic, which might have caused some countries to withdraw from the event.\r\nMake it texty\r\nThe above line chart looks fine, though a bit plain. So now we will make use of ggtext to add some flavor to it. I will split the line chart into two panels (one from 1990 to 2005 and the other from 2006 to 2020) using facets for two reasons: (1) to avoid crowding and overlapping, and (2) to demonstrate how we can modify the facet strips.\r\n\r\n\r\nlibrary(ggtext)\r\nlibrary(extrafont) # Fonts for plotting\r\n\r\n# Import and register the system fonts\r\n# font_import()  # Please run this line to import the fonts; only need to do it once\r\nloadfonts(quiet = T)  # Need to load the system fonts in every R session\r\n\r\n# Create a new column for the two time periods\r\nIBO_data <- IBO_data %>% \r\n  mutate(Time_period = ifelse(Year <= 2005, \"1990 to 2005\", \"2006 to 2020\"))\r\n\r\n# Plain faceted line chart\r\nIBO_plot <- ggplot(IBO_data, aes(x = Year, y = Students)) + \r\n  geom_point() + \r\n  geom_line() + \r\n  facet_wrap(~Time_period, scales = \"free\", nrow = 2, strip.position = \"right\") +\r\n  scale_x_continuous(breaks = 1990:2020) + \r\n  theme_classic()\r\n\r\nIBO_plot \r\n\r\n\r\n\r\n\r\nThere are three main things we can do with ggtext:\r\n (1) Modify text outside the plot area  (2) Modify text inside the plot area  (3) Add external images to the plot\r\nI will go through the details in the following sections.\r\n(1) Modify text outside the plot area\r\nFirst, we will begin by modifying the text outside the plot area — title, axis labels, axis ticks, captions, facet strips, etc.\r\nTitle\r\n\r\n\r\n# Title\r\nIBO_plot <- IBO_plot + \r\n  labs(title = \"<span style = 'font-size: 18pt'><i>**I**nternational **B**iology **O**lympiad<i/><\/span><br>Numbers of participants over past three decades\") + \r\n  theme(plot.title = element_textbox_simple(size = 10,\r\n                                            family = \"Century Gothic\",\r\n                                            color = \"#007575\",\r\n                                            fill = \"#e0f2f2\",\r\n                                            halign = 0.5,\r\n                                            lineheight = 1.5,\r\n                                            padding = margin(5, 1, 5, 1), \r\n                                            margin = margin(0, 0, 5, 0)))\r\n\r\nIBO_plot\r\n\r\n\r\n\r\n\r\nAxis labels\r\n\r\n\r\n# Axis labels\r\nIBO_plot <- IBO_plot + \r\n  labs(x = \"\", y = \"Number of participants<br><span style = 'font-size: 9pt;'>(**Note:** different y-axis scales in the two panels)<\/span>\") + \r\n  theme(axis.title.y = element_textbox_simple(size = 14,\r\n                                              family = \"Arial\",\r\n                                              color = \"#045a8d\",\r\n                                              fill = \"#fff080\",\r\n                                              halign = 0.5,\r\n                                              orientation = \"left-rotated\",\r\n                                              r = unit(5, \"pt\"),\r\n                                              padding = margin(4, 4, 4, 4),\r\n                                              margin = margin(0, 0, 8, 0),\r\n                                              minwidth = unit(2, \"in\"),\r\n                                              maxwidth = unit(5, \"in\")))\r\n\r\nIBO_plot\r\n\r\n\r\n\r\n\r\nAxis ticks\r\n\r\n\r\n# Axis ticks\r\nbreaks_fun <- function(x) {  # A function to specify the axis tick positions for the two panels\r\n  if (min(x) < 50) {\r\n    seq(0, 200, 50)\r\n  } else {\r\n    seq(150, 300, 50)\r\n  }\r\n}\r\n\r\nlabels_fun <- function(x) {  # A function to specify the axis tick labels for the two panels\r\n  if (min(x) < 50) {\r\n    c(\"<span style = 'font-size: 12pt; color: red;'>0<\/span>\", seq(50, 150, 50), \"<span style = 'font-size: 12pt; color: red;'>200<\/span>\")\r\n  } else {\r\n    c(\"<span style = 'font-size: 12pt; color: red;'>150<\/span>\", seq(200, 250, 50), \"<span style = 'font-size: 12pt; color: red;'>300<\/span>\")\r\n  }\r\n}\r\n\r\nIBO_plot <- IBO_plot + \r\n  scale_y_continuous(expand = c(0, 40),  # For adjusting the y-axis range \r\n                     breaks = breaks_fun,\r\n                     labels = labels_fun) +\r\n  theme(axis.text.y = element_markdown())\r\n\r\nIBO_plot\r\n\r\n\r\n\r\n\r\nCaption\r\n\r\n\r\n# Caption\r\nIBO_plot <- IBO_plot + \r\n  labs(caption = \"<i><span style = 'font-size: 9pt;'>Data source: https:&#47;&#47;www&#46;ibo-info.org/en/contest/past-ibos.html<\/span><br>Retrieved July, 2021<i/>\") + \r\n  theme(plot.caption = element_markdown(size = 8,\r\n                                        family = \"serif\",\r\n                                        color = \"grey50\",\r\n                                        lineheight = 1.5))\r\n\r\nIBO_plot\r\n\r\n\r\n\r\n\r\nFacet strips\r\n\r\n\r\n# Facet strips\r\nIBO_plot <- IBO_plot + \r\n  theme(strip.background = element_blank(),\r\n        strip.text.y = element_textbox_simple(size = 12,\r\n                                              family = \"Comic Sans MS\",\r\n                                              color = \"white\", \r\n                                              fill = \"#810f7c\", \r\n                                              halign = 0.5,\r\n                                              orientation = \"right-rotated\",\r\n                                              r = unit(8, \"pt\"),\r\n                                              padding = margin(1, 1, 1, 1),\r\n                                              margin = margin(3, 3, 3, 3)))\r\n\r\nIBO_plot\r\n\r\n\r\n\r\n\r\nThe key functions here are element_textbox_simple() and element_markdown(). Basically they do the same job; the main difference is that the former allows for more control over the appearance of the text box, whereas the latter focuses on modifying the text itself. So if you are working with text only, you can simply use element_markdown().\r\nThere are many things you can modify for the text. For example, the font size, font family, font color, font position and alignment, and line spacing. As for the text box, you can change the border color, fill color, size, corner radius (for rounded box), and so on. Take a look at the documentations of the two functions to see what other arguments there are!\r\nThe usage of element_textbox_simple() and element_markdown() are pretty much similar to their ggplot2 counterpart element_text(). When you want to modify a specific part of the plot (e.g., title), just call these functions to the corresponding arguments (e.g., plot.title =) in the theme().\r\nAlso, you might have seen that I use quite a bit of the Markdown/HTML/CSS syntaxes. Remember in the beginning, I mentioned that ggtext can render text written in Markdown/HTML/CSS languages. With these, you can easily do some advanced text manipulation, for instance, modifying the appearance of a specific letter/word in a sentence (like what I did for the title).\r\n(2) Modify text inside the plot area\r\nAfter getting the text outside the plot area done, we can proceed to the text inside the plot area. Specifically, I will add country labels to the points and modify their appearances a bit.\r\nHere I use the function geom_richtext() to map the country labels to the points. This function is quite similar to ggplot2’s geom_text() or geom_label(), but it has an additional feature: the text/box can be rotated by any angles.\r\n\r\n\r\n# Add country labels to the points\r\nIBO_plot <- IBO_plot +\r\n  geom_richtext(aes(label = Country), \r\n                size = 2,\r\n                color = colorRampPalette(c(\"#a50f15\", \"#e66101\"))(nrow( IBO_data)),\r\n                fill = \"transparent\",\r\n                angle = 45,\r\n                hjust = 0.1,\r\n                vjust = -0.1,\r\n                label.r = unit(4, \"pt\"),\r\n                label.padding = unit(c(1, 5, 1, 5), \"pt\"))\r\n\r\nIBO_plot\r\n\r\n\r\n\r\n\r\n(3) Add external images to the plot\r\nNow we are finished with our text manipulation. Most of the time, we will end it here and be happy to go. However, there is one extra thing we can do to make the plot fancier — adding external images to the plot! Of course you can do this manually later (perhaps in PowerPoint), but isn’t it great to complete all the work at once in R? This will streamline the process and make it fully reproducible! So let’s do it!\r\nThe principle of adding images is the use of HTML <img> tag, which has a basic syntax structure <img scr = 'path_to_image'/>. If you are not familiar with HTML, don’t panic. Simply copy and paste the code in the example below and replace the image path with yours (can be a website url or a local directory). The additional height and width attribute in the <img> tag allow for controlling the size of the images.\r\nYou can add images to two places of a figure: axis ticks and plot panel.\r\nAdd images to the axis ticks\r\nTo add images to the axis ticks, you need to specify in scale_x|y_XXX() the tick positions at which the images should be placed on the axis (breaks =), along with the HTML <img> tags as labels (labels =). After that, call element_markdown() to the corresponding theme element (in this example axis.text.x =) in theme(). The images will then be displayed along the axis.\r\n\r\n\r\n# Download the zip file of the logos from my GitHub repository\r\n# The file will be saved in your current directory\r\ndownload.file(url = \"https://raw.githubusercontent.com/GenChangHSU/ggGallery/master/_posts/2021-07-10-post-5-awesome-text-display-with-ggtext/IBO_logos.zip\", destfile = \"./IBO_logos.zip\")\r\n\r\n# Unzip the file\r\nunzip(zipfile = \"./IBO_logos.zip\")\r\n\r\n# HTML <img> tags\r\nIBO_logo <- paste0(\"<img src = './IBO_logos/\", 1990:2020, \".png' height = '15' width = '15' /><br>\", 1990:2020)\r\n\r\n# Add the logos to the x-axis ticks\r\nIBO_plot <- IBO_plot +\r\n  scale_x_continuous(breaks = 1990:2020, labels = IBO_logo) +\r\n  theme(axis.text.x = element_markdown(color = \"black\", size = 7))\r\n\r\nIBO_plot\r\n\r\n\r\n\r\n\r\nAdd images to the plot panel\r\nTo add images to the plot panel, simply create a dataframe containing the x and y positions as well as a column containing the HTML <img> tags, and use geom_richtext(aes(label = )) to map the image tags to the plot. The images will then be displayed at the designated positions.\r\n\r\n\r\n# Add the main logo to the upper panel\r\nIBO_logo_df <- data.frame(x = 1992, \r\n                          y = 200,\r\n                          Time_period = \"1990 to 2005\",\r\n                          logo = paste0(\"<img src = './IBO_logos/main.png' width = '100' />\"))\r\n\r\nIBO_plot <- IBO_plot +\r\n  geom_richtext(data = IBO_logo_df, \r\n                aes(x = x, y = y, label = logo), \r\n                colour = \"transparent\")\r\n\r\nIBO_plot\r\n\r\n\r\n\r\n\r\nTo give you a better idea of how the final figure is generated, I have organized the code chunk pieces throughout the post into a full code chunk below. You can simply copy and paste it into your R session, swap your own data and modify the arguments as you wish!\r\n\r\n\r\n# Library\r\nlibrary(tidyverse)\r\nlibrary(rvest)\r\nlibrary(ggtext)\r\nlibrary(extrafont)\r\n\r\n# Import and register the system fonts\r\n# font_import()  # Please run this line to import the fonts; only need to do it once\r\nloadfonts(quiet = T)  # Need to load the system fonts in every R session\r\n\r\n# The IBO website url\r\nIBO_url <- \"https://www.ibo-info.org/en/contest/past-ibos.html\"\r\n\r\n# Read and extract the website contents into a dataframe\r\nIBO_html <- read_html(IBO_url) %>%\r\n  html_elements(\"div.item__content\") %>%\r\n  html_text2()\r\n\r\nYear <- IBO_html %>% str_extract(\"[:digit:]{4}(?=:)\")\r\nCountry <- IBO_html %>% str_extract(\"(?<=,\\\\s)[:alpha:]+[:blank:]*[:alpha:]*\") %>% replace_na(\"Japan\")\r\nStudents <- IBO_html %>% str_extract(\"[:digit:]*(?=\\\\s*students)\")\r\n\r\nIBO_data <- tibble(Year, Country, Students) %>%\r\n  mutate(Year = as.numeric(Year),\r\n         Students = as.numeric(Students)) %>%\r\n  filter(Year %in% 1990:2020) %>%\r\n  mutate(Time_period = ifelse(Year <= 2005, \"1990 to 2005\", \"2006 to 2020\"))\r\n\r\n# Functions for setting breaks and labels for each of the two facet panels\r\nbreaks_fun <- function(x) {\r\n  if (min(x) < 50) {\r\n    seq(0, 200, 50)\r\n  } else {\r\n    seq(150, 300, 50)\r\n  }\r\n}\r\n\r\nlabels_fun <- function(x) {\r\n  if (min(x) < 50) {\r\n    c(\"<span style = 'font-size: 12pt; color: red;'>0<\/span>\", seq(50, 150, 50), \"<span style = 'font-size: 12pt; color: red;'>200<\/span>\")\r\n  } else {\r\n    c(\"<span style = 'font-size: 12pt; color: red;'>150<\/span>\", seq(200, 250, 50), \"<span style = 'font-size: 12pt; color: red;'>300<\/span>\")\r\n  }\r\n}\r\n\r\n# Download the IBO logos\r\ndownload.file(url = \"https://raw.githubusercontent.com/GenChangHSU/ggGallery/master/_posts/2021-07-10-post-5-awesome-text-display-with-ggtext/IBO_logos.zip\", destfile = \"./IBO_logos.zip\")\r\nunzip(zipfile = \"./IBO_logos.zip\")\r\n\r\n# A vector of HTML <img> tags as x-axis tick logos\r\nIBO_logo <- paste0(\"<img src = './IBO_logos/\", 1990:2020, \".png' height = '15' width = '15' /><br>\", 1990:2020)\r\n\r\n# A dataframe for the main logo\r\nIBO_logo_df <- data.frame(x = 1992, \r\n                          y = 200,\r\n                          Time_period = \"1990 to 2005\",\r\n                          logo = paste0(\"<img src = './IBO_logos/main.png' width = '100' />\"))\r\n\r\n# Plot\r\nggplot(IBO_data, aes(x = Year, y = Students)) +\r\n  \r\n  # Country labels\r\n  geom_richtext(aes(label = Country), \r\n                size = 2,\r\n                color = colorRampPalette(c(\"#a50f15\", \"#e66101\"))(nrow( IBO_data)),\r\n                fill = \"transparent\",\r\n                angle = 45,\r\n                hjust = 0.1,\r\n                vjust = -0.1,\r\n                label.r = unit(4, \"pt\"),\r\n                label.padding = unit(c(1, 5, 1, 5), \"pt\")) +\r\n  \r\n  # Main logo in the upper panel\r\n  geom_richtext(data = IBO_logo_df, \r\n                aes(x = x, y = y, label = logo), \r\n                colour = \"transparent\") +\r\n  \r\n  # Points\r\n  geom_point() + \r\n  \r\n  # Lines\r\n  geom_line() + \r\n  \r\n  # Facets\r\n  facet_wrap(~Time_period, scales = \"free\", nrow = 2, strip.position = \"right\") +\r\n  \r\n  # x-axis tick logos\r\n  scale_x_continuous(breaks = 1990:2020, labels = IBO_logo) +\r\n  \r\n  # y-axis tick labels\r\n  scale_y_continuous(expand = c(0, 40),\r\n                     breaks = breaks_fun,\r\n                     labels = labels_fun) +\r\n  \r\n  # Built-in theme\r\n  theme_classic() + \r\n  \r\n  # Specify title, y-axis label, caption, and facet strips using Markdown/HTML/CSS language\r\n  labs(title = \"<span style = 'font-size: 18pt'><i>**I**nternational **B**iology **O**lympiad<i/><\/span><br>Numbers of participants over past three decades\",\r\n       x = \"\", \r\n       y = \"Number of participants<br><span style = 'font-size: 9pt;'>(**Note:** different y-axis scales in the two panels)<\/span>\",\r\n       caption = \"<i><span style = 'font-size: 9pt;'>Data source: https:&#47;&#47;www&#46;ibo-info.org/en/contest/past-ibos.html<\/span><br>Retrieved July, 2021<i/>\") + \r\n  \r\n  theme(# Title\r\n        plot.title = element_textbox_simple(size = 10,\r\n                                            family = \"Century Gothic\",\r\n                                            color = \"#007575\",\r\n                                            fill = \"#e0f2f2\",\r\n                                            halign = 0.5,\r\n                                            lineheight = 1.5,\r\n                                            padding = margin(5, 1, 5, 1), \r\n                                            margin = margin(0, 0, 5, 0)),\r\n        # y-axis label\r\n        axis.title.y = element_textbox_simple(size = 14,\r\n                                              family = \"Arial\",\r\n                                              color = \"#045a8d\",\r\n                                              fill = \"#fff080\",\r\n                                              halign = 0.5,\r\n                                              orientation = \"left-rotated\",\r\n                                              r = unit(5, \"pt\"),\r\n                                              padding = margin(4, 4, 4, 4),\r\n                                              margin = margin(0, 0, 8, 0),\r\n                                              minwidth = unit(2, \"in\"),\r\n                                              maxwidth = unit(5, \"in\")),\r\n        \r\n        # x-axis tick logos\r\n        axis.text.x = element_markdown(color = \"black\", size = 7),\r\n        \r\n        # y-axis tick labels\r\n        axis.text.y = element_markdown(),\r\n        \r\n        # Caption\r\n        plot.caption = element_markdown(size = 8,\r\n                                        family = \"serif\",\r\n                                        color = \"grey50\",\r\n                                        lineheight = 1.5),\r\n        \r\n        # Facet strips\r\n        strip.background = element_blank(),\r\n        strip.text.y = element_textbox_simple(size = 12,\r\n                                              family = \"Comic Sans MS\",\r\n                                              color = \"white\", \r\n                                              fill = \"#810f7c\", \r\n                                              halign = 0.5,\r\n                                              orientation = \"right-rotated\",\r\n                                              r = unit(8, \"pt\"),\r\n                                              padding = margin(1, 1, 1, 1),\r\n                                              margin = margin(3, 3, 3, 3)))\r\n\r\n\r\n\r\nSummary\r\nA quick recap of what we have done throughout the post. First, we modified the plot title, axis labels, axis ticks, caption, and facet strips using two theme() elements element_textbox_simple() and element_markdown(). Second, we added some country labels to the points using the geom layer geom_richtext() and customized the labels a bit. Third, we used element_markdown() to add external images to the x-axis, and geom_richtext() to add another image to the plot panel.\r\nHonestly, I feel that the final figure in this post does not look so satisfying. I tried to show the things you can do with ggtext as many as possible, making the figure kind of “over-texty”. It is just for demonstration purpose though. When working with your own figure, you might want to think a bit about how to better design it. Maybe spend some time exploring the package website to learn more. Also, I highly recommend having a basic understanding of Markdown/HTML/CSS, which will allow you to fully leverage the strength of ggtext!\r\nOh, one last thing forget to say: I was one of the participants in the 2014 IBO in Bali, Indonesia. It’s been seven years. Time flies! In fact, this is one of the main reasons why I chose IBO data as the example dataset. The other is that the website has many logos, which serves well the purpose of this post.\r\nThat’s it for this post and don’t forget to leave your comments and suggestions below if you have any!\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-07-10-post-5-awesome-text-display-with-ggtext/../../homepage_images/Post5.png",
    "last_modified": "2021-08-12T20:23:01-07:00",
    "input_file": {},
    "preview_width": 1152,
    "preview_height": 1152
  },
  {
    "path": "posts/2021-06-26-post-4-consistent-colors-of-the-same-factor-levels-across-figures/",
    "title": "Post #4. Consistent colors of the same factor levels across figures",
    "description": "In this post, I will show you a simple trick to keep the colors of the same factor levels consistent across different ggplot figures.",
    "author": [
      {
        "name": "Gen-Chang Hsu",
        "url": {}
      }
    ],
    "date": "2021-06-26",
    "categories": [
      "2021"
    ],
    "contents": "\r\n\r\n\r\nd-article a {\r\n    color: #2780e3 !important;\r\n    border-bottom: none !important;\r\n}\r\n\r\nd-article a:hover {\r\n    color: #2780e3 !important;\r\n    border-bottom: 2px solid !important;\r\n}\r\n\r\nd-byline {\r\n    margin-left: -10% !important;\r\n}\r\n\r\nd-title {\r\n    margin-left: -10%;\r\n}\r\n\r\nd-title h1{\r\n    font-size: 45px;\r\n    width: 130%;\r\n}\r\n\r\nd-article {\r\n    margin-left: -10%;\r\n}\r\n\r\np {\r\n    width: 120%;\r\n}\r\n\r\nd-article h2 {\r\n    width: 120%;\r\n}\r\n\r\nd-article h3 {\r\n  width: 120%;\r\n  font-size: 28px;\r\n}\r\n\r\ndiv.article-footer{\r\n    width: 120%;\r\n}\r\n\r\nd-article div.sourceCode { \r\n    width: 120% !important;\r\n}\r\n\r\nd-article pre { \r\n    width: 120% !important;\r\n}\r\n\r\ndiv.l-body {\r\n    width: 120% !important;\r\n}\r\n\r\nThe problem\r\nSuppose that we want to visualize the relationship (i.e., a scatterplot) between engine displacement (displ) and highway miles per gallon (hwy) of cars in the mpg dataset. And for some reason, we would like to create separate figures for each of the three drive train types (drv) rather than having a single figure with three panels (i.e., facets). Also, the data points in the figures will be colored by car type (class).\r\n\r\n\r\nlibrary(tidyverse)\r\n\r\n# Four-wheel drive\r\nplot_drv4 <- mpg %>% \r\n  mutate(class = factor(class)) %>%\r\n  filter(drv == \"4\") %>%\r\n  ggplot(aes(x = displ, y = hwy)) + \r\n  geom_point(aes(color = class)) + \r\n  stat_smooth(method = \"lm\", se = F) + \r\n  lims(x = c(1, 7), y = c(10, 30)) +\r\n  labs(title = \"Four-wheel drive\") +\r\n  theme_classic() + \r\n  theme(plot.title = element_text(size = 12, hjust = 0.5), \r\n        legend.title.align = 0.5)\r\n\r\n# Front-wheel drive\r\nplot_drvf <- mpg %>% \r\n  mutate(class = factor(class)) %>%  \r\n  filter(drv == \"f\") %>%\r\n  ggplot(aes(x = displ, y = hwy)) + \r\n  geom_point(aes(color = class)) + \r\n  stat_smooth(method = \"lm\", se = F) +\r\n  lims(x = c(1, 6), y = c(10, 45)) +\r\n  labs(title = \"Front-wheel drive\") +\r\n  theme_classic() + \r\n  theme(plot.title = element_text(size = 12, hjust = 0.5), \r\n        legend.title.align = 0.5)\r\n\r\n# Rear wheel drive\r\nplot_drvr <- mpg %>%   \r\n  mutate(class = factor(class)) %>%\r\n  filter(drv == \"r\") %>%\r\n  ggplot(aes(x = displ, y = hwy)) + \r\n  geom_point(aes(color = class)) + \r\n  stat_smooth(method = \"lm\", se = F) + \r\n  lims(x = c(3, 7.5), y = c(10, 30)) +\r\n  labs(title = \"Rear-wheel drive\") +\r\n  theme_classic() + \r\n  theme(plot.title = element_text(size = 12, hjust = 0.5), \r\n        legend.title.align = 0.5)\r\n\r\nplot_drv4\r\nplot_drvf\r\nplot_drvr\r\n\r\n\r\n\r\n\r\nHave you spotted something weird? Yup, the colors of the levels in class are not consistent across the three figures (e.g., salmon red represents “compact” in the first two figures but “2seater” in the third; “subcompact” has three different colors in the three figures!) This problem arises because some factor levels are shared across (two or all three) figures while the others are missing, and by default ggplot will only color the levels appearing in the data and omit the rest.\r\nThe partial solution\r\nSo how can you fix this problem? Well, there is a workaround: since ggplot by default omits the unused levels, we can ask ggplot not to do so by specifying drop = F in scale_color_XXX():\r\n\r\n\r\n# Four-wheel drive\r\nplot_drv4_undropped <- mpg %>% \r\n  mutate(class = factor(class)) %>%\r\n  filter(drv == \"4\") %>%\r\n  ggplot(aes(x = displ, y = hwy)) + \r\n  geom_point(aes(color = class)) + \r\n  scale_color_discrete(drop = F) +  # Not to drop the unused levels\r\n  stat_smooth(method = \"lm\", se = F) + \r\n  lims(x = c(1, 7), y = c(10, 30)) +\r\n  labs(title = \"Four-wheel drive\") +\r\n  theme_classic() + \r\n  theme(plot.title = element_text(size = 12, hjust = 0.5), \r\n        legend.title.align = 0.5)\r\n\r\n# Front-wheel drive\r\nplot_drvf_undropped <- mpg %>% \r\n  mutate(class = factor(class)) %>%\r\n  filter(drv == \"f\") %>%\r\n  ggplot(aes(x = displ, y = hwy)) + \r\n  geom_point(aes(color = class)) + \r\n  scale_color_discrete(drop = F) +\r\n  stat_smooth(method = \"lm\", se = F) +\r\n  lims(x = c(1, 6), y = c(10, 45)) +\r\n  labs(title = \"Front-wheel drive\") +\r\n  theme_classic() + \r\n  theme(plot.title = element_text(size = 12, hjust = 0.5), \r\n        legend.title.align = 0.5)\r\n\r\n# Rear wheel drive\r\nplot_drvr_undropped <- mpg %>% \r\n  mutate(class = factor(class)) %>%\r\n  filter(drv == \"r\") %>%\r\n  ggplot(aes(x = displ, y = hwy)) + \r\n  geom_point(aes(color = class)) + \r\n  scale_color_discrete(drop = F) +\r\n  stat_smooth(method = \"lm\", se = F) +\r\n  lims(x = c(3, 7.5), y = c(10, 30)) +\r\n  labs(title = \"Rear-wheel drive\") +\r\n  theme_classic() + \r\n  theme(plot.title = element_text(size = 12, hjust = 0.5), \r\n        legend.title.align = 0.5)\r\n\r\nplot_drv4_undropped\r\nplot_drvf_undropped\r\nplot_drvr_undropped\r\n\r\n\r\n\r\n\r\nNow, as you can see, each level in class is associated with a specific color across all three figures. However, another problem comes (I bet you already know what it is): the unused levels are shown in the legends even though they do not appear in the plots (e.g., there is no “2seater” car with four-wheel drive, but “2seater” still shows up in the legend). Depending on the nature of your figure and your purpose, if the legends are not necessary, you can simply hide them while having consistent colors across the figures. But what if you want to keep the legends? Keep reading!\r\nThe ultimate solution\r\nSo what is the ultimate solution to this problem? Three steps:\r\nFirst, create a named vector with colors (can be either hex color codes, color names, or a mixture of them) as the vector elements and factor levels as their names. Note that all levels of the factor across the figures should appear as the vector names, which means the length of the vector should be the same as the number of factor levels. This named vector will be the palette for the next step.\r\nNext, use scale_color_manual(values = name_of_palette) to manually set the colors of the factor levels based on the palette.\r\nFinally, identify the subset of factor levels appearing in the data you are using for that specific figure and specify them using the argument limits = in scale_color_manual().\r\nOkay, to see is to believe. Here is a demo:\r\n\r\n\r\nlibrary(RColorBrewer)\r\n\r\n# Create a named vector as the palette\r\nclass <- unique(mpg$class)  # All factor levels across figures\r\ncolors <- brewer.pal(length(class), \"Set1\")  # Colors\r\nmy_palette <- set_names(colors, class)  # Named vector\r\n\r\n# Four-wheel drive\r\nclass_drv4 <- mpg %>%\r\n  filter(drv == \"4\") %>% \r\n  .$class %>%\r\n  unique()  # Subset of levels in \"class\" for four-wheel drive cars\r\n\r\nplot_drv4_manual <- mpg %>% \r\n  mutate(class = factor(class)) %>%\r\n  filter(drv == \"4\") %>%\r\n  ggplot(aes(x = displ, y = hwy)) + \r\n  geom_point(aes(color = class)) + \r\n  scale_color_manual(values = my_palette, limits = class_drv4) +  # Manually set the colors of the factor levels based on the palette and also specify the levels present in the data \r\n  stat_smooth(method = \"lm\", se = F) + \r\n  lims(x = c(1, 7), y = c(10, 30)) +\r\n  labs(title = \"Four-wheel drive\") +\r\n  theme_classic() + \r\n  theme(plot.title = element_text(size = 12, hjust = 0.5), \r\n        legend.title.align = 0.5)\r\n\r\n# Front-wheel drive\r\nclass_drvf <- mpg %>% \r\n  filter(drv == \"f\") %>% \r\n  .$class %>%\r\n  unique()\r\n  \r\nplot_drvf_manual <- mpg %>% \r\n  mutate(class = factor(class)) %>%\r\n  filter(drv == \"f\") %>%\r\n  ggplot(aes(x = displ, y = hwy)) + \r\n  geom_point(aes(color = class)) + \r\n  scale_color_manual(values = my_palette, limits = class_drvf) +\r\n  stat_smooth(method = \"lm\", se = F) +\r\n  lims(x = c(1, 6), y = c(10, 45)) +\r\n  labs(title = \"Front-wheel drive\") +\r\n  theme_classic() + \r\n  theme(plot.title = element_text(size = 12, hjust = 0.5), \r\n        legend.title.align = 0.5)\r\n\r\n# Rear wheel drive\r\nclass_drvr <- mpg %>% \r\n  filter(drv == \"r\") %>% \r\n  .$class %>%\r\n  unique()\r\n\r\nplot_drvr_manual <- mpg %>% \r\n  mutate(class = factor(class)) %>%\r\n  filter(drv == \"r\") %>%\r\n  ggplot(aes(x = displ, y = hwy)) + \r\n  geom_point(aes(color = class)) + \r\n  scale_color_manual(values = my_palette, limits = class_drvr) +\r\n  stat_smooth(method = \"lm\", se = F) +\r\n  lims(x = c(3, 7.5), y = c(10, 30)) +\r\n  labs(title = \"Rear-wheel drive\") +\r\n  theme_classic() + \r\n  theme(plot.title = element_text(size = 12, hjust = 0.5), \r\n        legend.title.align = 0.5)\r\n\r\nplot_drv4_manual\r\nplot_drvf_manual\r\nplot_drvr_manual\r\n\r\n\r\n\r\n\r\nNow, not only are the colors of the factor levels consistent across the figures, but also the legends are properly displaying the levels appearing in the plots. Problem solved!\r\nAn advantage of this approach is that it offers great flexibility for users to select the colors they would like for each factor level. Of course, you have to spend a bit of time creating the palette yourself instead of just lazily asking ggplot to automatically color the levels for you. But think in the other way round: you get 100% control of the colors! Doesn’t that sound good?\r\nLast but not least, in this example I used the built-in color palette “Set1” from the package RColorBrewer, which provides different types of palettes coming in a variety of colors. And if you want to build your own palette from scratch, definitely check out the website ColorBrewer. There are tons of options to customize the colors to your heart’s content.\r\nThat’s it for this post and don’t forget to leave your comments and suggestions below if you have any. Also, do let me know if you find another (perhaps even simpler) way to do the same job!\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-06-26-post-4-consistent-colors-of-the-same-factor-levels-across-figures/../../homepage_images/Post4.png",
    "last_modified": "2021-06-27T22:37:22-07:00",
    "input_file": {},
    "preview_width": 960,
    "preview_height": 576
  },
  {
    "path": "posts/2021-06-18-post-3-pie-charts-with-ggplot/",
    "title": "Post #3. Pie charts with ggplot",
    "description": "Want to know how to create effective pie charts with ggplot? Dig in to learn more!",
    "author": [
      {
        "name": "Gen-Chang Hsu",
        "url": {}
      }
    ],
    "date": "2021-06-18",
    "categories": [
      "2021"
    ],
    "contents": "\r\n\r\n\r\nd-article a {\r\n    color: #2780e3 !important;\r\n    border-bottom: none !important;\r\n}\r\n\r\nd-article a:hover {\r\n    color: #2780e3 !important;\r\n    border-bottom: 2px solid !important;\r\n}\r\n\r\nd-byline {\r\n    margin-left: -10% !important;\r\n}\r\n\r\nd-title {\r\n    margin-left: -10%;\r\n}\r\n\r\nd-title h1{\r\n    font-size: 45px;\r\n    width: 130%;\r\n}\r\n\r\nd-article {\r\n    margin-left: -10%;\r\n}\r\n\r\np {\r\n    width: 120%;\r\n}\r\n\r\nd-article h2 {\r\n    width: 120%;\r\n}\r\n\r\nd-article h3 {\r\n  width: 120%;\r\n  font-size: 28px;\r\n  \r\n}\r\n\r\ndiv.article-footer{\r\n    width: 120%;\r\n}\r\n\r\nd-article div.sourceCode { \r\n    width: 120% !important;\r\n}\r\n\r\nd-article pre { \r\n    width: 120% !important;\r\n}\r\n\r\ndiv.l-body {\r\n    width: 120% !important;\r\n}\r\n\r\nBackground\r\nPie charts are arguably one of the most fundamental graphs in the world. They are primarily used for presenting categorical variables with numerical values (values that can be converted to proportions). These charts are so simple and straightforward that almost everyone can grasp the information at first glance without thinking, thus quite useful for data exploration and communication (yet some have argued not to use them, especially in scientific publications. See this article for more details). That said, an ill-designed pie chart could still ruin your good data. So in this “cook” post, we will be looking at some ways to enhance your pie chart and make it more “attractive” and “effective”!\r\nBasic pie charts with ggplot\r\nTo create a pie chart with ggplot, simply make a stacked barplot and add the function coord_polar(theta = \"y\"):\r\n\r\n\r\nlibrary(tidyverse)\r\n\r\n# Data preparation: cars with different numbers of cylinders\r\nn_cyl <- mtcars %>%\r\n  group_by(cyl) %>%\r\n  summarise(N = n()) %>%\r\n  mutate(cyl = as.factor(cyl))\r\n\r\n# Basic pie chart  \r\nggplot(n_cyl, aes(x = \"x\", y = N, fill = cyl)) +\r\n  geom_bar(stat = \"identity\", position = \"stack\") + \r\n  coord_polar(theta = \"y\")\r\n\r\n\r\n\r\n\r\nYou can also change the direction in which the categories/levels are ordered by specifying direction = -1 in coord_polar():\r\n\r\n\r\nggplot(n_cyl, aes(x = \"x\", y = N, fill = cyl)) +\r\n  geom_bar(stat = \"identity\", position = \"stack\") + \r\n  coord_polar(theta = \"y\", direction = -1)  # Counter-clockwise\r\n\r\n\r\n\r\n\r\nSo what does theta = \"y\" do? Basically, this argument tells ggplot to map the y-axis to a polar coordinate system. The stacks in the barplot are bent into a circle, with the arc length of each slice proportional to the original heights of the stacks. Remember, pie charts are just circular stacked barplots!\r\nMore tweaks\r\nRecipe 1: clean up the pie\r\nThe above pie chart does not look satisfying. The axis tick marks and labels, grid lines, and the grey background are kind of extra, so let’s remove them. We will also add a title to the plot.\r\n\r\n\r\nggplot(n_cyl, aes(x = \"x\", y = N, fill = cyl)) +\r\n  geom_bar(stat = \"identity\", position = \"stack\") + \r\n  coord_polar(theta = \"y\", direction = -1) +\r\n  scale_fill_discrete(name = NULL) +  # Remove legend title\r\n  labs(title = \"Number of Cylinders\") +  # Add plot title\r\n  theme_void() +  # Empty theme\r\n  theme(plot.title = element_text(hjust = 0.5, size = 15))\r\n\r\n\r\n\r\n\r\nRecipe 2: label the pie\r\nSometimes you may want to directly label the slices rather than having a separate legend. Here is a trick: change the y axis tick labels to the names of the slices. We will compute the midpoints of the arcs (which are the positions at which the tick labels will be placed) and specify the label names in scale_y_continuous().\r\nBy the way, because the last factor level (in this example “cyl 8”) is at the bottom of the barplot and will go first in the pie chart, we need to reverse the order of the factor levels in our original dataframe to match the order of the stacks (slices) in the plot.\r\n\r\n\r\n# Compute the midpoints of the arcs\r\nlabel_pos <- n_cyl %>%\r\n  arrange(desc(cyl)) %>%  # Reverse the order of the factor levels\r\n  mutate(pos = cumsum(N) - N/2)\r\n\r\nggplot(n_cyl, aes(x = \"x\", y = N, fill = cyl)) +\r\n  geom_bar(stat = \"identity\", position = \"stack\") + \r\n  coord_polar(theta = \"y\", direction = -1, clip = \"off\") +\r\n  scale_y_continuous(breaks = label_pos$pos, labels = c(\"Eight     \", \"Six\", \"    Four\")) +  # Add some white space to the labels to prevent overlapping \r\n  scale_fill_discrete(name = NULL, guide = F) +  \r\n  labs(title = \"Number of Cylinders\") + \r\n  theme_void() +\r\n  theme(plot.title = element_text(hjust = 0.5, size = 15),\r\n        axis.text.x = element_text(size = 12))\r\n\r\n\r\n\r\n\r\nRecipe 3: annotate the pie\r\nAdditionally, you might want to annotate the slices, say for example, the proportions. We will create a new dataframe and use geom_text() to map the labels to the slices. The x positions are just an arbitrary “x” (same as the one in geom_bar()); the y positions are the midpoints of the arcs.\r\n\r\n\r\n# A dataframe for mapping the labels to the slices\r\nlabel_pos2 <- n_cyl %>%\r\n  arrange(desc(cyl)) %>%\r\n  mutate(pos = cumsum(N) - N/2,\r\n         prop = paste(100*round(N/sum(N), 2), \"%\"))\r\n\r\nggplot(n_cyl, aes(x = \"x\", y = N, fill = cyl)) +\r\n  geom_bar(stat = \"identity\", position = \"stack\") + \r\n  geom_text(data = label_pos2, aes(x = \"x\", y = pos, label = prop)) +\r\n  coord_polar(theta = \"y\", direction = -1, clip = \"off\") +\r\n  scale_y_continuous(breaks = label_pos2$pos, labels = c(\"Eight     \", \"Six\", \"    Four\")) + \r\n  scale_fill_discrete(name = NULL, guide = F) +  \r\n  labs(title = \"Number of Cylinders \\n (n = 32)\") + \r\n  theme_void() +\r\n  theme(plot.title = element_text(hjust = 0.5, size = 15),\r\n        axis.text.x = element_text(size = 12)) \r\n\r\n\r\n\r\n\r\nAn even simpler alternative is to map the labels to the stacks using geom_text() and center-align their vertical positions by specifying the argument position_stack(vjust = 0.5):\r\n\r\n\r\nn_cyl2 <- n_cyl %>%\r\n  arrange(desc(cyl)) %>%\r\n  mutate(pos = cumsum(N) - N/2,\r\n         prop = paste(100*round(N/sum(N), 2), \"%\"))\r\n\r\nggplot(n_cyl2, aes(x = \"x\", y = N, fill = cyl)) +\r\n  geom_bar(stat = \"identity\", position = \"stack\") + \r\n  geom_text(aes(label = prop), position = position_stack(vjust = 0.5)) +  # Center-align the vertical positions of the labels on each stack\r\n  coord_polar(theta = \"y\", direction = -1, clip = \"off\") +\r\n  scale_y_continuous(breaks = n_cyl2$pos, labels = c(\"Eight     \", \"Six\", \"    Four\")) + \r\n  scale_fill_discrete(name = NULL, guide = F) +  \r\n  labs(title = \"Number of Cylinders \\n (n = 32)\") + \r\n  theme_void() +\r\n  theme(plot.title = element_text(hjust = 0.5, size = 15),\r\n        axis.text.x = element_text(size = 12)) \r\n\r\n\r\n\r\n\r\nLooks way better than the previous ones, doesn’t it?\r\nDifferent varieties of pies\r\nNow that we have already learned how to bake a basic pie, let’s take a look at some other pie varieties:\r\n1. Exploded pie chart:\r\nIn an exploded pie chart, the slices are split apart from each other. You can “cut” the slices by adding thick white borders around them (personally I feel that this is more visually appealing than the original “unexploded” one).\r\n\r\n\r\nlabel_pos2 <- n_cyl %>%\r\n  arrange(desc(cyl)) %>%\r\n  mutate(cumsum = cumsum(N),\r\n         mid = N/2,\r\n         pos = cumsum - mid,\r\n         prop = paste(100*round(N/sum(N), 2), \"%\"))\r\n\r\nggplot(n_cyl, aes(x = \"x\", y = N, fill = cyl)) +\r\n  geom_bar(stat = \"identity\", position = \"stack\", color = \"white\", size = 5) +  # Add white borders around the slices\r\n  geom_text(data = label_pos2, aes(x = \"x\", y = pos, label = prop)) +\r\n  coord_polar(theta = \"y\", direction = -1, clip = \"off\") +\r\n  scale_y_continuous(breaks = label_pos$pos, labels = c(\"Eight     \", \"Six\", \"    Four\")) +\r\n  scale_fill_discrete(name = NULL, guide = F) +  \r\n  labs(title = \"Number of Cylinders \\n (n = 32)\") + \r\n  theme_void() +\r\n  theme(plot.title = element_text(hjust = 0.5, size = 15),\r\n        axis.text.x = element_text(size = 12))  \r\n\r\n\r\n\r\n\r\n2. Doughnut chart:\r\nHave you ever seen a pie chart with its center hollowed out? This is called a “Doughnut chart” (yes, from a “pie” to a “doughnut”)! There is no direct function or argument to create a doughnut chart in ggplot, and so we will use a small trick here: add an arbitrary “empty” level to the x-axis before the one we have. This works because there is nothing to be bent into a circle for that empty level, thus leaving a white area and forming a hollow there. We can use scale_x_discrete(limits = c(\"x_empty\", \"x\")) to add an arbitrary level “x_empty” to the x-axis.\r\n\r\n\r\nlabel_pos <- n_cyl %>%\r\n  arrange(desc(cyl)) %>%\r\n  mutate(cumsum = cumsum(N),\r\n         mid = N/2,\r\n         pos = cumsum - mid)\r\n\r\nggplot(n_cyl, aes(x = \"x\", y = N, fill = cyl)) +\r\n  geom_bar(stat = \"identity\", position = \"stack\", width = 0.7) +\r\n  scale_x_discrete(limits = c(\"x_empty\", \"x\")) +\r\n  coord_polar(theta = \"y\", direction = -1, clip = \"off\") +\r\n  scale_y_continuous(breaks = label_pos$pos, labels = c(\"Eight     \", \"Six\", \"    Four\")) + \r\n  scale_fill_discrete(name = NULL, guide = F) +  \r\n  labs(title = \"Number of Cylinders\") + \r\n  theme_void() +\r\n  theme(plot.title = element_text(hjust = 0.5, size = 15),\r\n        axis.text.x = element_text(size = 12))\r\n\r\n\r\n\r\n\r\nNotes:\r\nIn this example, I call the empty level “x_empty”. You can use whatever name you want; just make sure it is not the same as your original one.\r\nThe empty level should be added BEFORE the original level (limits = c(\"x_empty\", \"x\")), not after (limits = c(\"x\", \"x_empty\")). Otherwise, the white area will be left outside the pie instead of inside it.\r\nThe “thickness” of the doughnut can be controlled by the argument width = in geom_bar().\r\n\r\n\r\nd-article p span#aaa:before { \r\n  content: \"(1) \"; \r\n  display: inline-block;\r\n  margin-left: -1.5em;\r\n  margin-right: 0.3em;\r\n}\r\n\r\nd-article p span#bbb:before { \r\n  content: \"(2) \"; \r\n  display: inline-block;\r\n  margin-left: -1.5em;\r\n  margin-right: 0.3em;\r\n}\r\n\r\nd-article p span#ccc:before { \r\n  content: \"(3) \"; \r\n  display: inline-block;\r\n  margin-left: -1.5em;\r\n  margin-right: 0.3em;\r\n}\r\n\r\nd-article table.lightable-paper {\r\n  margin-bottom: 0px; \r\n}\r\n\r\n3. Bull’s eye chart:\r\nWhat happens if you call theta = \"x\" instead of theta = \"y\" in coord_polar()? This will give you a chart with concentric circles, also known as “Bull’s eye chart”. Be careful though, this kind of chart could be a bit misleading, as the areas of the circles/rings are not proportional to the original values.\r\n\r\n\r\nggplot(n_cyl, aes(x = \"x\", y = N, fill = cyl)) +\r\n  geom_bar(stat = \"identity\", position = \"stack\", width = 1) + \r\n  coord_polar(theta = \"x\", direction = -1, clip = \"off\") +\r\n  scale_fill_discrete(name = NULL) +  \r\n  labs(title = \"Number of Cylinders\") + \r\n  theme_void() +\r\n  theme(plot.title = element_text(hjust = 0.5, size = 15))\r\n\r\n\r\n\r\n\r\nSummary\r\nAt this point, you should have got the hang of creating pie charts with ggplot. As you can see, this type of graph is best for visualizing categorical variables with numerical values. However, it becomes less effective when there are too many categories (slices). In general, the number of categories should be less than 7 to achieve a better visual effect (though it really depends on the nature of your data). Also, when you are comparing the slices across multiple pies, it can sometimes be visually deceptive since the angle of the slice represents the “proportion” rather than the original “absolute value”. In these cases, a regular barplot or a boxplot would be a better alternative.\r\nHope you learn something and will be able to make a “tasty” pie chart yourself. And as always, don’t forget to leave your comments and suggestions below if you have any!\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-06-18-post-3-pie-charts-with-ggplot/../../homepage_images/Post3.png",
    "last_modified": "2021-07-12T02:54:04-07:00",
    "input_file": {},
    "preview_width": 960,
    "preview_height": 576
  },
  {
    "path": "posts/2021-05-26-guest-post-1-communicating-the-essence-of-your-data/",
    "title": "Guest Post #1. Communicating the ESSENCE of your data",
    "description": "Visualizing multi-dimensional and dynamic data can be challenging. In this post, I will show how you can better communicate these features with interactive plots and animations.",
    "author": [
      {
        "name": "William Ou",
        "url": {}
      }
    ],
    "date": "2021-05-26",
    "categories": [
      "2021"
    ],
    "contents": "\r\n\r\n\r\nd-article a {\r\n    color: #2780e3 !important;\r\n      border-bottom: none !important;\r\n}\r\n\r\nd-article a:hover {\r\n  color: #2780e3 !important;\r\n    border-bottom: 2px solid !important;\r\n}\r\n\r\nd-byline {\r\n  margin-left: -10% !important;\r\n}\r\n\r\nd-title {\r\n  margin-left: -10%;\r\n}\r\n\r\nd-title h1{\r\n  font-size: 45px;\r\n  width: 130%;\r\n}\r\n\r\nd-article {\r\n  margin-left: -10%;\r\n}\r\n\r\np {\r\n  width: 120%;\r\n}\r\n\r\nd-article h2 {\r\n  width: 120%;\r\n}\r\n\r\nd-article h3 {\r\n  width: 120%;\r\n  font-size: 32px;\r\n}\r\n\r\ndiv.article-footer{\r\n  width: 120%;\r\n}\r\n\r\nd-article div.sourceCode { \r\n  width: 120% !important;\r\n}\r\n\r\nd-article pre { \r\n  width: 120% !important;\r\n}\r\n\r\ndiv.l-body {\r\n  width: 120% !important;\r\n}\r\n\r\nd-article table thead tr {\r\n  height: 60px !important;\r\n  width: 210px !important;\r\n}\r\n\r\nd-article table thead th {\r\n  height: 60px !important;\r\n  font-size: 22px !important;\r\n  width: 210px !important;\r\n}\r\n\r\nd-article table tbody tr td {\r\n  font-size: 21px !important;\r\n  height: 60px !important;\r\n  text-align: center !important;\r\n  width: 210px !important;\r\n}\r\n\r\nFrom the host: Here comes the first guest post by William Ou! In this post, he will show you how to “attractively” visualize the data using interactive plots and animations. This is a rather long post, but fear not, I promise you will find it interesting, and most importantly, your data visualization skills will LEVEL UP!\r\nThe challenge\r\nArguably the biggest challenge in data visualization is the fact that we live in a multi-dimensional and dynamic 1 world. Our 3D perception of the universe is an obvious case in support of the multi-dimensions part (all we need is more than 1-dimension!). You might argue that some things are in fact static though. But! If you look closely enough, everything in the physical world is dynamic, constantly moving and fluctuating in space and time. The screen on your computer may look “static” but it’s actually constantly emitting light. Even the wall in your room is made up of particles that are constantly moving. Yet, despite the ubiquity of multi-dimensionality and dynamical behaviors, a large amount of the information we acquire today comes in the standard 2D and static format: the book or Wikipedia page you’re reading, you’re Facebook feed, magazines etc.. Although there are ways of representing dynamic and multi-dimension features in 2D static mediums, doing so often distorts the original information and can hinder the “essence” of the message that one wishes to convey. In many cases, deciphering distorted information requires practice and prior knowledge which renders the information accessible to only a few selected individuals. To demonstrate my point, consider the 2 ways of visualizing the Palmer Penguins dataset below:\r\nApproach 1: Dimension reduction (PCA)\r\n\r\n\r\n\r\nApproach 2: 3D interactive plots\r\n\r\n\r\n{\"x\":{\"visdat\":{\"2fb43144404b\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"2fb43144404b\",\"attrs\":{\"2fb43144404b\":{\"x\":{},\"y\":{},\"z\":{},\"col\":{},\"legendgroup\":{},\"marker\":{\"color\":{},\"colorscale\":[\"#FFE1A1\",\"#683531\"],\"showscale\":true},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Palmer Penguins\",\"scene\":{\"xaxis\":{\"title\":\"Bill length (mm)\"},\"yaxis\":{\"title\":\"Bill depth (mm)\"},\"zaxis\":{\"title\":\"Flipper length (mm)\"}},\"annotations\":[{\"x\":1.13,\"y\":1.05,\"text\":\"Body mass (g)\",\"showarrow\":false}],\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[39.1,39.5,40.3,36.7,39.3,38.9,39.2,41.1,38.6,34.6,36.6,38.7,42.5,34.4,46,37.8,37.7,35.9,38.2,38.8,35.3,40.6,40.5,37.9,40.5,39.5,37.2,39.5,40.9,36.4,39.2,38.8,42.2,37.6,39.8,36.5,40.8,36,44.1,37,39.6,41.1,36,42.3,39.6,40.1,35,42,34.5,41.4,39,40.6,36.5,37.6,35.7,41.3,37.6,41.1,36.4,41.6,35.5,41.1,35.9,41.8,33.5,39.7,39.6,45.8,35.5,42.8,40.9,37.2,36.2,42.1,34.6,42.9,36.7,35.1,37.3,41.3,36.3,36.9,38.3,38.9,35.7,41.1,34,39.6,36.2,40.8,38.1,40.3,33.1,43.2,35,41,37.7,37.8,37.9,39.7,38.6,38.2,38.1,43.2,38.1,45.6,39.7,42.2,39.6,42.7,38.6,37.3,35.7,41.1,36.2,37.7,40.2,41.4,35.2,40.6,38.8,41.5,39,44.1,38.5,43.1,36.8,37.5,38.1,41.1,35.6,40.2,37,39.7,40.2,40.6,32.1,40.7,37.3,39,39.2,36.6,36,37.8,36,41.5,46.1,50,48.7,50,47.6,46.5,45.4,46.7,43.3,46.8,40.9,49,45.5,48.4,45.8,49.3,42,49.2,46.2,48.7,50.2,45.1,46.5,46.3,42.9,46.1,47.8,48.2,50,47.3,42.8,45.1,59.6,49.1,48.4,42.6,44.4,44,48.7,42.7,49.6,45.3,49.6,50.5,43.6,45.5,50.5,44.9,45.2,46.6,48.5,45.1,50.1,46.5,45,43.8,45.5,43.2,50.4,45.3,46.2,45.7,54.3,45.8,49.8,49.5,43.5,50.7,47.7,46.4,48.2,46.5,46.4,48.6,47.5,51.1,45.2,45.2,49.1,52.5,47.4,50,44.9,50.8,43.4,51.3,47.5,52.1,47.5,52.2,45.5,49.5,44.5,50.8,49.4,46.9,48.4,51.1,48.5,55.9,47.2,49.1,46.8,41.7,53.4,43.3,48.1,50.5,49.8,43.5,51.5,46.2,55.1,48.8,47.2,46.8,50.4,45.2,49.9,46.5,50,51.3,45.4,52.7,45.2,46.1,51.3,46,51.3,46.6,51.7,47,52,45.9,50.5,50.3,58,46.4,49.2,42.4,48.5,43.2,50.6,46.7,52,50.5,49.5,46.4,52.8,40.9,54.2,42.5,51,49.7,47.5,47.6,52,46.9,53.5,49,46.2,50.9,45.5,50.9,50.8,50.1,49,51.5,49.8,48.1,51.4,45.7,50.7,42.5,52.2,45.2,49.3,50.2,45.6,51.9,46.8,45.7,55.8,43.5,49.6,50.8,50.2],\"y\":[18.7,17.4,18,19.3,20.6,17.8,19.6,17.6,21.2,21.1,17.8,19,20.7,18.4,21.5,18.3,18.7,19.2,18.1,17.2,18.9,18.6,17.9,18.6,18.9,16.7,18.1,17.8,18.9,17,21.1,20,18.5,19.3,19.1,18,18.4,18.5,19.7,16.9,18.8,19,17.9,21.2,17.7,18.9,17.9,19.5,18.1,18.6,17.5,18.8,16.6,19.1,16.9,21.1,17,18.2,17.1,18,16.2,19.1,16.6,19.4,19,18.4,17.2,18.9,17.5,18.5,16.8,19.4,16.1,19.1,17.2,17.6,18.8,19.4,17.8,20.3,19.5,18.6,19.2,18.8,18,18.1,17.1,18.1,17.3,18.9,18.6,18.5,16.1,18.5,17.9,20,16,20,18.6,18.9,17.2,20,17,19,16.5,20.3,17.7,19.5,20.7,18.3,17,20.5,17,18.6,17.2,19.8,17,18.5,15.9,19,17.6,18.3,17.1,18,17.9,19.2,18.5,18.5,17.6,17.5,17.5,20.1,16.5,17.9,17.1,17.2,15.5,17,16.8,18.7,18.6,18.4,17.8,18.1,17.1,18.5,13.2,16.3,14.1,15.2,14.5,13.5,14.6,15.3,13.4,15.4,13.7,16.1,13.7,14.6,14.6,15.7,13.5,15.2,14.5,15.1,14.3,14.5,14.5,15.8,13.1,15.1,15,14.3,15.3,15.3,14.2,14.5,17,14.8,16.3,13.7,17.3,13.6,15.7,13.7,16,13.7,15,15.9,13.9,13.9,15.9,13.3,15.8,14.2,14.1,14.4,15,14.4,15.4,13.9,15,14.5,15.3,13.8,14.9,13.9,15.7,14.2,16.8,16.2,14.2,15,15,15.6,15.6,14.8,15,16,14.2,16.3,13.8,16.4,14.5,15.6,14.6,15.9,13.8,17.3,14.4,14.2,14,17,15,17.1,14.5,16.1,14.7,15.7,15.8,14.6,14.4,16.5,15,17,15.5,15,16.1,14.7,15.8,14,15.1,15.2,15.9,15.2,16.3,14.1,16,16.2,13.7,14.3,15.7,14.8,16.1,17.9,19.5,19.2,18.7,19.8,17.8,18.2,18.2,18.9,19.9,17.8,20.3,17.3,18.1,17.1,19.6,20,17.8,18.6,18.2,17.3,17.5,16.6,19.4,17.9,19,18.4,19,17.8,20,16.6,20.8,16.7,18.8,18.6,16.8,18.3,20.7,16.6,19.9,19.5,17.5,19.1,17,17.9,18.5,17.9,19.6,18.7,17.3,16.4,19,17.3,19.7,17.3,18.8,16.6,19.9,18.8,19.4,19.5,16.5,17,19.8,18.1,18.2,19,18.7],\"z\":[181,186,195,193,190,181,195,182,191,198,185,195,197,184,194,174,180,189,185,180,187,183,187,172,180,178,178,188,184,195,196,190,180,181,184,182,195,186,196,185,190,182,190,191,186,188,190,200,187,191,186,193,181,194,185,195,185,192,184,192,195,188,190,198,190,190,196,197,190,195,191,184,187,195,189,196,187,193,191,194,190,189,189,190,202,205,185,186,187,208,190,196,178,192,192,203,183,190,193,184,199,190,181,197,198,191,193,197,191,196,188,199,189,189,187,198,176,202,186,199,191,195,191,210,190,197,193,199,187,190,191,200,185,193,193,187,188,190,192,185,190,184,195,193,187,201,211,230,210,218,215,210,211,219,209,215,214,216,214,213,210,217,210,221,209,222,218,215,213,215,215,215,215,210,220,222,209,207,230,220,220,213,219,208,208,208,225,210,216,222,217,210,225,213,215,210,220,210,225,217,220,208,220,208,224,208,221,214,231,219,230,229,220,223,216,221,221,217,216,230,209,220,215,223,212,221,212,224,212,228,218,218,212,230,218,228,212,224,214,226,216,222,203,225,219,228,215,228,215,210,219,208,209,216,229,213,230,217,230,222,214,215,222,212,213,192,196,193,188,197,198,178,197,195,198,193,194,185,201,190,201,197,181,190,195,181,191,187,193,195,197,200,200,191,205,187,201,187,203,195,199,195,210,192,205,210,187,196,196,196,201,190,212,187,198,199,201,193,203,187,197,191,203,202,194,206,189,195,207,202,193,210,198],\"col\":[3750,3800,3250,3450,3650,3625,4675,3200,3800,4400,3700,3450,4500,3325,4200,3400,3600,3800,3950,3800,3800,3550,3200,3150,3950,3250,3900,3300,3900,3325,4150,3950,3550,3300,4650,3150,3900,3100,4400,3000,4600,3425,3450,4150,3500,4300,3450,4050,2900,3700,3550,3800,2850,3750,3150,4400,3600,4050,2850,3950,3350,4100,3050,4450,3600,3900,3550,4150,3700,4250,3700,3900,3550,4000,3200,4700,3800,4200,3350,3550,3800,3500,3950,3600,3550,4300,3400,4450,3300,4300,3700,4350,2900,4100,3725,4725,3075,4250,2925,3550,3750,3900,3175,4775,3825,4600,3200,4275,3900,4075,2900,3775,3350,3325,3150,3500,3450,3875,3050,4000,3275,4300,3050,4000,3325,3500,3500,4475,3425,3900,3175,3975,3400,4250,3400,3475,3050,3725,3000,3650,4250,3475,3450,3750,3700,4000,4500,5700,4450,5700,5400,4550,4800,5200,4400,5150,4650,5550,4650,5850,4200,5850,4150,6300,4800,5350,5700,5000,4400,5050,5000,5100,5650,4600,5550,5250,4700,5050,6050,5150,5400,4950,5250,4350,5350,3950,5700,4300,4750,5550,4900,4200,5400,5100,5300,4850,5300,4400,5000,4900,5050,4300,5000,4450,5550,4200,5300,4400,5650,4700,5700,5800,4700,5550,4750,5000,5100,5200,4700,5800,4600,6000,4750,5950,4625,5450,4725,5350,4750,5600,4600,5300,4875,5550,4950,5400,4750,5650,4850,5200,4925,4875,4625,5250,4850,5600,4975,5500,5500,4700,5500,4575,5500,5000,5950,4650,5500,4375,5850,6000,4925,4850,5750,5200,5400,3500,3900,3650,3525,3725,3950,3250,3750,4150,3700,3800,3775,3700,4050,3575,4050,3300,3700,3450,4400,3600,3400,2900,3800,3300,4150,3400,3800,3700,4550,3200,4300,3350,4100,3600,3900,3850,4800,2700,4500,3950,3650,3550,3500,3675,4450,3400,4300,3250,3675,3325,3950,3600,4050,3350,3450,3250,4050,3800,3525,3950,3650,3650,4000,3400,3775,4100,3775],\"legendgroup\":[3750,3800,3250,3450,3650,3625,4675,3200,3800,4400,3700,3450,4500,3325,4200,3400,3600,3800,3950,3800,3800,3550,3200,3150,3950,3250,3900,3300,3900,3325,4150,3950,3550,3300,4650,3150,3900,3100,4400,3000,4600,3425,3450,4150,3500,4300,3450,4050,2900,3700,3550,3800,2850,3750,3150,4400,3600,4050,2850,3950,3350,4100,3050,4450,3600,3900,3550,4150,3700,4250,3700,3900,3550,4000,3200,4700,3800,4200,3350,3550,3800,3500,3950,3600,3550,4300,3400,4450,3300,4300,3700,4350,2900,4100,3725,4725,3075,4250,2925,3550,3750,3900,3175,4775,3825,4600,3200,4275,3900,4075,2900,3775,3350,3325,3150,3500,3450,3875,3050,4000,3275,4300,3050,4000,3325,3500,3500,4475,3425,3900,3175,3975,3400,4250,3400,3475,3050,3725,3000,3650,4250,3475,3450,3750,3700,4000,4500,5700,4450,5700,5400,4550,4800,5200,4400,5150,4650,5550,4650,5850,4200,5850,4150,6300,4800,5350,5700,5000,4400,5050,5000,5100,5650,4600,5550,5250,4700,5050,6050,5150,5400,4950,5250,4350,5350,3950,5700,4300,4750,5550,4900,4200,5400,5100,5300,4850,5300,4400,5000,4900,5050,4300,5000,4450,5550,4200,5300,4400,5650,4700,5700,5800,4700,5550,4750,5000,5100,5200,4700,5800,4600,6000,4750,5950,4625,5450,4725,5350,4750,5600,4600,5300,4875,5550,4950,5400,4750,5650,4850,5200,4925,4875,4625,5250,4850,5600,4975,5500,5500,4700,5500,4575,5500,5000,5950,4650,5500,4375,5850,6000,4925,4850,5750,5200,5400,3500,3900,3650,3525,3725,3950,3250,3750,4150,3700,3800,3775,3700,4050,3575,4050,3300,3700,3450,4400,3600,3400,2900,3800,3300,4150,3400,3800,3700,4550,3200,4300,3350,4100,3600,3900,3850,4800,2700,4500,3950,3650,3550,3500,3675,4450,3400,4300,3250,3675,3325,3950,3600,4050,3350,3450,3250,4050,3800,3525,3950,3650,3650,4000,3400,3775,4100,3775],\"marker\":{\"color\":[3750,3800,3250,3450,3650,3625,4675,3200,3800,4400,3700,3450,4500,3325,4200,3400,3600,3800,3950,3800,3800,3550,3200,3150,3950,3250,3900,3300,3900,3325,4150,3950,3550,3300,4650,3150,3900,3100,4400,3000,4600,3425,3450,4150,3500,4300,3450,4050,2900,3700,3550,3800,2850,3750,3150,4400,3600,4050,2850,3950,3350,4100,3050,4450,3600,3900,3550,4150,3700,4250,3700,3900,3550,4000,3200,4700,3800,4200,3350,3550,3800,3500,3950,3600,3550,4300,3400,4450,3300,4300,3700,4350,2900,4100,3725,4725,3075,4250,2925,3550,3750,3900,3175,4775,3825,4600,3200,4275,3900,4075,2900,3775,3350,3325,3150,3500,3450,3875,3050,4000,3275,4300,3050,4000,3325,3500,3500,4475,3425,3900,3175,3975,3400,4250,3400,3475,3050,3725,3000,3650,4250,3475,3450,3750,3700,4000,4500,5700,4450,5700,5400,4550,4800,5200,4400,5150,4650,5550,4650,5850,4200,5850,4150,6300,4800,5350,5700,5000,4400,5050,5000,5100,5650,4600,5550,5250,4700,5050,6050,5150,5400,4950,5250,4350,5350,3950,5700,4300,4750,5550,4900,4200,5400,5100,5300,4850,5300,4400,5000,4900,5050,4300,5000,4450,5550,4200,5300,4400,5650,4700,5700,5800,4700,5550,4750,5000,5100,5200,4700,5800,4600,6000,4750,5950,4625,5450,4725,5350,4750,5600,4600,5300,4875,5550,4950,5400,4750,5650,4850,5200,4925,4875,4625,5250,4850,5600,4975,5500,5500,4700,5500,4575,5500,5000,5950,4650,5500,4375,5850,6000,4925,4850,5750,5200,5400,3500,3900,3650,3525,3725,3950,3250,3750,4150,3700,3800,3775,3700,4050,3575,4050,3300,3700,3450,4400,3600,3400,2900,3800,3300,4150,3400,3800,3700,4550,3200,4300,3350,4100,3600,3900,3850,4800,2700,4500,3950,3650,3550,3500,3675,4450,3400,4300,3250,3675,3325,3950,3600,4050,3350,3450,3250,4050,3800,3525,3950,3650,3650,4000,3400,3775,4100,3775],\"colorscale\":[\"#FFE1A1\",\"#683531\"],\"showscale\":true,\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"type\":\"scatter3d\",\"mode\":\"markers\",\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\r\nIf you’ve learned PCA before, you might have no problem interpreting Approach 1. But if you haven’t, you might be wondering: What the **** is a PC1/PC2? What are the units of the axes? Why are there arrows pointing at different directions? What does a single point even represent? Most importantly, where did my penguins go!? Because the focus of this post is not about statistics, I won’t go into the details of explaining what a PCA is. What I do want to point out though, is how we can visualize data in a more accessible manner.\r\nNow, Approach 2 may also look like a handful. However, if you take a deep breath and carefully examine the plot, anyone would be able to interpret it, even without any background (assuming that they can read English, of course)! Upon closer inspection, you’ll see that each point in the figure is made up of 4 variables: 1. Bill length (mm), 2. Bill depth (mm), 3. Flipper length (mm), and 4. Body size (g). All these variables characterize an individual penguin (a penguin is multi-dimensional!). The 4 variables are represented by 3 axes and a color gradient. The reason why we do not have a 4th axis is because our brain is not programmed to think that way, so the 4th variable is represented as a color gradient instead. An important thing to note is that, these points on the plot show exactly what the data says. Nothing is distorted and its as raw as it can be. One cool feature of this plot is that it is interactive. Although our screen is 2D, we can get a better “feel” of the dimensionality by rotating the axes around. Rotating works by dragging the plot around with your cursor. By doing so, we’ll see that at certain angles, the points look like a big “cloud” while at other angles you can see a clear separation between clusters of points. Try playing around with the plot, explore its features, and see if you can find other ways of visualizing your data.\r\nDynamic variables\r\nNow let’s take a look at some ways to visualize dynamic variables, variables that change over time. Gapminder is a foundation founded by Hans Rosling that aims to highlight common misconceptions about global trends with data. The gapminder package in R provides a subset of its dataset. Let’s look at how life expectancy and GDP of each country changes over time (year).\r\nApproach 1: Static representation with arrows\r\n\r\n\r\n\r\nApproach 2: Animate to reveal each time step sequentially\r\n\r\n\r\n\r\nFor the dynamics example, the two figures above are actually identical. The only difference is that the animation shows how the state variable (in this case, life expectancy) develops over time by revealing each data sequentially as time progresses. Animations are particularly helpful for visualizing time-series data with multiple variables because things can get cluttered really fast when lines are drawn to represent the passage of time. Although the animated version also shows a lot of cluttering towards the end, it doesn’t necessarily impede understanding because the viewer already has a sense of where each point came from.\r\nThe gapminder dataset is the perfect example that demonstrates the power of good data visualization! If you haven’t already, I strongly encourage you to check out the seminal TED talk and this BBC trailer by Hans Rosling, the OG of descriptive and exploratory data analysis.\r\nNow for some coding\r\nLet’s go over some simple examples to see how you can make your own interactive plot with plotly and animation with gganimate. Both of these packages have really good documentation and you can find out more about them on their websites: plotly and gganimate\r\nI. Making your first interactive 3D plot with plotly\r\nWe’ll use the mtcars dataset here as an example. Make sure to have the plotly package installed on your computer.\r\nThe plotly package is built to be compatible with tidyverse with both sharing very similar syntax. Just as ggplot() is to ggplot2, the main engine of plotly plots is the function plot_ly(). Again, very similar to ggplot2, we supply the plot_ly() function with our data frame and the variables we would like to plot.\r\nWe’ll start by loading the package(s) first, and tweak the dataset a little bit prior to plotting. Here, we will treat # of cylinders as a factor instead of a integer value for visualization purposes.\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(plotly)\r\n\r\nmtcars_new <-  mtcars %>%\r\n  mutate(cyl = as.factor(cyl))\r\n\r\n\r\n\r\nAgain, very similar to ggplot(), we supply the plot_ly() function with the data that we want to plot and specify the axes which would be x, y, and z since we have a 3rd dimension. Note the small differences in how the variables are defined here. In plot_ly() the variables are defined with the “~” (tilde), which is like what you would normally do when defining a linear model (e.g. lm(y ~ x1 + x2)). In addition, we’ll also specify a 4th variable/dimension as the color of the points.\r\n\r\n\r\nmt_plotly <- plot_ly(data = mtcars_new, x = ~wt, y = ~hp, z = ~qsec,\r\n        color = ~cyl)\r\nmt_plotly\r\n\r\n\r\n\r\n{\"x\":{\"visdat\":{\"2fb45fa2129f\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"2fb45fa2129f\",\"attrs\":{\"2fb45fa2129f\":{\"x\":{},\"y\":{},\"z\":{},\"color\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"scene\":{\"xaxis\":{\"title\":\"wt\"},\"yaxis\":{\"title\":\"hp\"},\"zaxis\":{\"title\":\"qsec\"}},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[2.32,3.19,3.15,2.2,1.615,1.835,2.465,1.935,2.14,1.513,2.78],\"y\":[93,62,95,66,52,65,97,66,91,113,109],\"z\":[18.61,20,22.9,19.47,18.52,19.9,20.01,18.9,16.7,16.9,18.6],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"4\",\"marker\":{\"color\":\"rgba(102,194,165,1)\",\"line\":{\"color\":\"rgba(102,194,165,1)\"}},\"textfont\":{\"color\":\"rgba(102,194,165,1)\"},\"error_y\":{\"color\":\"rgba(102,194,165,1)\"},\"error_x\":{\"color\":\"rgba(102,194,165,1)\"},\"line\":{\"color\":\"rgba(102,194,165,1)\"},\"frame\":null},{\"x\":[2.62,2.875,3.215,3.46,3.44,3.44,2.77],\"y\":[110,110,110,105,123,123,175],\"z\":[16.46,17.02,19.44,20.22,18.3,18.9,15.5],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"6\",\"marker\":{\"color\":\"rgba(252,141,98,1)\",\"line\":{\"color\":\"rgba(252,141,98,1)\"}},\"textfont\":{\"color\":\"rgba(252,141,98,1)\"},\"error_y\":{\"color\":\"rgba(252,141,98,1)\"},\"error_x\":{\"color\":\"rgba(252,141,98,1)\"},\"line\":{\"color\":\"rgba(252,141,98,1)\"},\"frame\":null},{\"x\":[3.44,3.57,4.07,3.73,3.78,5.25,5.424,5.345,3.52,3.435,3.84,3.845,3.17,3.57],\"y\":[175,245,180,180,180,205,215,230,150,150,245,175,264,335],\"z\":[17.02,15.84,17.4,17.6,18,17.98,17.82,17.42,16.87,17.3,15.41,17.05,14.5,14.6],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"8\",\"marker\":{\"color\":\"rgba(141,160,203,1)\",\"line\":{\"color\":\"rgba(141,160,203,1)\"}},\"textfont\":{\"color\":\"rgba(141,160,203,1)\"},\"error_y\":{\"color\":\"rgba(141,160,203,1)\"},\"error_x\":{\"color\":\"rgba(141,160,203,1)\"},\"line\":{\"color\":\"rgba(141,160,203,1)\"},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\r\nAnd there you have it! Pretty straightforward, right? But if you’re picky, you might not be satisfied with this and want to tweak it some more. So let’s try to edit the axis labels, since they’re all abbreviated and have no units. Through the following code, you’ll start seeing more tidyverse/ggplot2 style elements of the plot_ly syntax, see if you can spot them!\r\n\r\n\r\nmt_plotly %>%\r\n    layout(title = 'Motor Trend Car Road Tests',\r\n         scene = list(xaxis = list(title = 'Weight (1000lbs)'),\r\n                      yaxis = list(title = 'Horsepower (hp)'),\r\n                      zaxis = list(title = 'Quarter mile time (s)')),\r\n         annotations = list( # This section is hard-coded \r\n           x = 1.13,\r\n           y = 1.05,\r\n           text = '# of Cylcinders',\r\n           showarrow = FALSE))\r\n\r\n\r\n\r\n{\"x\":{\"visdat\":{\"2fb45fa2129f\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"2fb45fa2129f\",\"attrs\":{\"2fb45fa2129f\":{\"x\":{},\"y\":{},\"z\":{},\"color\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Motor Trend Car Road Tests\",\"scene\":{\"xaxis\":{\"title\":\"Weight (1000lbs)\"},\"yaxis\":{\"title\":\"Horsepower (hp)\"},\"zaxis\":{\"title\":\"Quarter mile time (s)\"}},\"annotations\":[{\"x\":1.13,\"y\":1.05,\"text\":\"# of Cylcinders\",\"showarrow\":false}],\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[2.32,3.19,3.15,2.2,1.615,1.835,2.465,1.935,2.14,1.513,2.78],\"y\":[93,62,95,66,52,65,97,66,91,113,109],\"z\":[18.61,20,22.9,19.47,18.52,19.9,20.01,18.9,16.7,16.9,18.6],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"4\",\"marker\":{\"color\":\"rgba(102,194,165,1)\",\"line\":{\"color\":\"rgba(102,194,165,1)\"}},\"textfont\":{\"color\":\"rgba(102,194,165,1)\"},\"error_y\":{\"color\":\"rgba(102,194,165,1)\"},\"error_x\":{\"color\":\"rgba(102,194,165,1)\"},\"line\":{\"color\":\"rgba(102,194,165,1)\"},\"frame\":null},{\"x\":[2.62,2.875,3.215,3.46,3.44,3.44,2.77],\"y\":[110,110,110,105,123,123,175],\"z\":[16.46,17.02,19.44,20.22,18.3,18.9,15.5],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"6\",\"marker\":{\"color\":\"rgba(252,141,98,1)\",\"line\":{\"color\":\"rgba(252,141,98,1)\"}},\"textfont\":{\"color\":\"rgba(252,141,98,1)\"},\"error_y\":{\"color\":\"rgba(252,141,98,1)\"},\"error_x\":{\"color\":\"rgba(252,141,98,1)\"},\"line\":{\"color\":\"rgba(252,141,98,1)\"},\"frame\":null},{\"x\":[3.44,3.57,4.07,3.73,3.78,5.25,5.424,5.345,3.52,3.435,3.84,3.845,3.17,3.57],\"y\":[175,245,180,180,180,205,215,230,150,150,245,175,264,335],\"z\":[17.02,15.84,17.4,17.6,18,17.98,17.82,17.42,16.87,17.3,15.41,17.05,14.5,14.6],\"type\":\"scatter3d\",\"mode\":\"markers\",\"name\":\"8\",\"marker\":{\"color\":\"rgba(141,160,203,1)\",\"line\":{\"color\":\"rgba(141,160,203,1)\"}},\"textfont\":{\"color\":\"rgba(141,160,203,1)\"},\"error_y\":{\"color\":\"rgba(141,160,203,1)\"},\"error_x\":{\"color\":\"rgba(141,160,203,1)\"},\"line\":{\"color\":\"rgba(141,160,203,1)\"},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\r\nYes, plot_ly functions are pipeable! The piping here is analogous to “+” in ggplot2 syntax. The layout() is also much like the theme() in ggplot2. I will admit though, plot_ly takes time to get used to. The arguments that functions take are sometimes not as straightforward, for example, when does it need to be a list() and when does it not? Moreover, the legend title for the color scheme is hard-coded because there is no argument for specifying legend titles at the moment (at least to my knowledge).\r\nSo, in summary, I think plot_ly offers a neat way of visualizing complex data. The interactive aspect can also help make data more accessible and can be a handy pedagogical tool. However, if you’re trying to make a figure to publish in a scientific journal, this is probably an overkill.\r\nII. Making your first animation with gganimate\r\nBecause gganimate is a part of the tidverse/ggplot2 ecosystem, it should be very straightforward if you are already with familiar with either of them. The general schema of making an animation with gganimate is to:\r\nCreate a ggplot object with ALL your points plotted out.\r\nDecide how you would like the points to be animated by specifying how you would like the data to be shown over time. In the case of time-series, the “time” variable will be the index of your animation.\r\nChoose an appropriate transition function from gganimate, input your index variable (e.g. time), and simply overlay (“+”) this call to your ggplot object just as you would with adding geom_point(), geom_line(), theme()\r\nTHAT’S IT!\r\n\r\n\r\nd-article p span#aaa:before { \r\n  content: \"1. \"; \r\n  display: inline-block;\r\n  margin-left: -1.5em;\r\n  margin-right: 0.5em;\r\n}\r\n\r\nd-article p span#bbb:before { \r\n  content: \"2. \"; \r\n  display: inline-block;\r\n  margin-left: -1.5em;\r\n  margin-right: 0.5em;\r\n}\r\n\r\nd-article p span#ccc:before { \r\n  content: \"3. \"; \r\n  display: inline-block;\r\n  margin-left: -1.5em;\r\n  margin-right: 0.5em;\r\n}\r\n\r\nd-article p span#ddd:before { \r\n  content: \"4. \"; \r\n  display: inline-block;\r\n  margin-left: -1.5em;\r\n  margin-right: 0.5em;\r\n}\r\n\r\nd-article table.lightable-paper {\r\n  margin-bottom: 0px; \r\n}\r\n\r\nAs you can imagine, animations take a little time to render. So for the sake brevity, I’ll use only a subset of the gapminder dataset.\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(gganimate)\r\nlibrary(gapminder)\r\n\r\n# Subset the countries in Asia\r\ngapminder_asia <- gapminder %>%\r\n  filter(continent == 'Asia')\r\n\r\n\r\n\r\n\r\nLet’s “gg”plot it out:\r\n\r\n\r\nasia_p <- gapminder_asia %>%\r\n  ggplot(aes(x = year, y = pop, group = country)) +\r\n  geom_point() +\r\n  geom_path() +\r\n  geom_text(aes(label = country), hjust = -0.3, size = 2.5) +\r\n  scale_y_log10() +\r\n  xlim(1950, 2030) +\r\n  theme_bw()\r\n\r\nasia_p\r\n\r\n\r\n\r\n\r\nThis looks horrible, doesn’t it? But this is what I meant by “plot it all out”. This will become clearer through the animation process though, since the points and texts of each country will only appear once at each time point. Because the line specified by geom_path is continuous (only 1 line per group), it will only “grow” as time progresses. In other words, each country will only have a single line, a single point, and a single text throughout the animation.\r\nTo make the plot an animation, simply choose an appropriate transition function from the gganimate package and add it to your ggplot. But what the heck is a transition function? Transition functions are the functions the allow you to specify how you want your plot to be animated. In most cases, all you need to provide to the function is the variable from your dataframe in which you want the animations to be indexed. For example, if we want the animations to progress over time, then we want the time-indexed variable to be our argument. Here, we’ll use the transition_reveal() function as our transition function since we are trying to visualize the temporal evolution of population size.\r\n\r\n\r\nasia_p + transition_reveal(year)\r\n\r\n\r\n\r\n\r\nAs its name suggests, transition_reveal() works by gradually “revealing” your data. The video/gif you see is really just a combination of multiple frames, and each frame consists of only data from a given year. The order of appearance is dependent on the order of your index variable (in our case, year). In some cases, it might not be time that you want to animate and a continuous animation might not be the “essence” that you want your plot to communicate. Finding the correct transition function ultimately depends on the message that you want to convey.\r\nSummary\r\nI started off by suggesting to you that 2D static plots can sometimes limit our ability to communicate the story of our data. This is because our world is multi-dimensional and dynamic! I then showed you that we can overcome some of these limitations by creating I. Interactive plots that allow you to rotate axes, thereby giving the perception of “depth”, and II. Animations that captures the “passage of time”.\r\nThrough this post, I hope I, at least slightly, highlighted the pedagogical implications of making intuitive and accessible data through thoughtful visualizations. So there you have it! May you live long and prosper 🖖\r\nWilliam Ou is an ecologist broadly interested in complexity science, eco-evolutionary dynamics, and more recently, cognitive psychology. When not sciencing, he enjoys biking around the city, eating ice cream, making generative art with ggplot, and watching netflix. Check out his website to learn more!\r\n\r\nI refer to dynamic here as a term that indicates change over time, recognizing that time is sometimes interpreted as another dimension↩︎\r\n",
    "preview": "posts/2021-05-26-guest-post-1-communicating-the-essence-of-your-data/../../homepage_images/Guest_post1.gif",
    "last_modified": "2021-06-07T08:49:52-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-05-07-post-2-three-ways-to-create-log-axes-in-ggplots-which-one-should-you-use/",
    "title": "Post #2. Three ways to create log axes in ggplots: which one should you use?",
    "description": "This post shows you three different ways to create log axes in ggplots and provides some suggestions on which method to use for your figures.",
    "author": [
      {
        "name": "Gen-Chang Hsu",
        "url": {}
      }
    ],
    "date": "2021-05-07",
    "categories": [
      "2021"
    ],
    "contents": "\r\n\r\n\r\nd-article a {\r\n    color: #2780e3 !important;\r\n      border-bottom: none !important;\r\n}\r\n\r\nd-article a:hover {\r\n  color: #2780e3 !important;\r\n    border-bottom: 2px solid !important;\r\n}\r\n\r\nd-byline {\r\n  margin-left: -10% !important;\r\n}\r\n\r\nd-title {\r\n  margin-left: -10%;\r\n}\r\n\r\nd-title h1{\r\n  font-size: 45px;\r\n  width: 130%;\r\n}\r\n\r\nd-article {\r\n  margin-left: -10%;\r\n}\r\n\r\np {\r\n  width: 120%;\r\n}\r\n\r\nd-article h2 {\r\n  width: 120%;\r\n}\r\n\r\ndiv.article-footer{\r\n  width: 120%;\r\n}\r\n\r\nd-article div.sourceCode { \r\n  width: 120% !important;\r\n}\r\n\r\nd-article pre { \r\n  width: 120% !important;\r\n}\r\n\r\ndiv.l-body {\r\n  width: 120% !important;\r\n}\r\n\r\nd-article table thead tr {\r\n  height: 60px !important;\r\n  width: 210px !important;\r\n}\r\n\r\nd-article table thead th {\r\n  height: 60px !important;\r\n  font-size: 22px !important;\r\n  width: 210px !important;\r\n}\r\n\r\nd-article table tbody tr td {\r\n  font-size: 21px !important;\r\n  height: 60px !important;\r\n  text-align: center !important;\r\n  width: 210px !important;\r\n}\r\n\r\nWe often have data spanning across several orders of magnitude or having skewed distributions. In either case, we might consider transforming our data, and log transformation is one of the most common data transformation techniques people use.\r\nIn ggplots, there are three different methods to do log transformation: (1) Transformation of variables  (2) Transformation of scales  (3) Transformation of coordinates\r\nYou can take a look at a brief demonstration of the three methods on this ggplot2 website. These methods share something in common, but also differ from each other in some ways, and I often find it confusing to use them (I think you might feel the same way as I do!)\r\nIn this post, I will go over these methods one by one, explain the details, and make a comprehensive comparison. Hopefully, after reading the article, you will clear up the confusions and know how which method to go for your figures!\r\nBy the way, we will be working with the famous diamonds dataset in ggplot2, which contains the price and various attributes of around 54,000 diamonds.\r\nSay we would like to see how the price of diamonds is related to the weight (carat) of diamonds. Let’s first make a scatterplot to visualize their relationship:\r\n\r\n\r\nlibrary(tidyverse)\r\n\r\nggplot(diamonds, aes(x = carat, y = price)) +\r\n  geom_point() +\r\n  theme_classic(base_size = 13)\r\n\r\n\r\n\r\n\r\nIt looks a bit over-plotted, but still you can see a seemingly non-linear positive relationship between price and carat. So we decide to log-transform the data to make the relationship more linear.\r\nMethod 1. Transformation of variables\r\nThe first method is transformation of variables. This is done by applying log() directly to the x and/or y variables in the aes():\r\n\r\n\r\nggplot(diamonds, aes(x = log10(carat), y = log10(price))) +\r\n  geom_point() +\r\n  theme_classic(base_size = 13)\r\n\r\n\r\n\r\n\r\nAs you can see, the relationship does become more linear. This method simply log-transforms the x and y variables and plot them as is, and so now the axis ticks display the transformed rather than the original values.\r\nIf we fit a line through the points using stat_smooth(), we are essentially fitting a linear model with log-transformed carat and price as the predictor and the response:\r\n\r\n\r\nggplot(diamonds, aes(x = log10(carat), y = log10(price))) +\r\n  geom_point() +\r\n  stat_smooth(method = \"lm\", se = F) + \r\n  theme_classic(base_size = 13)\r\n\r\n\r\n\r\n\r\nJust that simple and easy! Though, a minor drawback of this method is that, since the axes now represent the transformed values, the interpretation might become a bit not so straightforward (e.g., what is a diamond of -0.4 log10(carat), or a diamond with a log10(price) of around 3.5?!)\r\nMethod 2. Transformation of scales\r\nThe second method is transformation of scales. This is done by specifying the trans = argument in the scale_XXX_continuous() function:\r\n\r\n\r\nggplot(diamonds, aes(x = carat, y = price)) +\r\n  geom_point() +\r\n  scale_x_continuous(trans = \"log10\") + \r\n  scale_y_continuous(trans = \"log10\") +\r\n  theme_classic(base_size = 13)\r\n\r\n\r\n\r\n\r\nLooks pretty similar to the plot we get from the first method right? Basically, this second method does the same thing as the first one in the beginning: log-transforming the data. But then, instead of displaying the transformed vales on the axes like what the first method does, it actually converts them back into the original values. This is why you will find that the tick marks are equally-spaced yet their corresponding numbers are not equally-distanced.\r\nAgain, we fit a line using stat_smooth():\r\n\r\n\r\nggplot(diamonds, aes(x = carat, y = price)) +\r\n  geom_point() +\r\n  scale_x_continuous(trans = \"log10\") + \r\n  scale_y_continuous(trans = \"log10\") +\r\n  stat_smooth(method = \"lm\", se = F) + \r\n  theme_classic(base_size = 13)\r\n\r\n\r\n\r\n\r\nIt is important to note that the line is fitted after the log transformation of data. In other words, the line is fitted using the log-transformed carat and price as the predictor and the response (i.e., log10(price) ~ log10(carat), not price~carat !!!). So in the plot, a price of around $3,000 for a 1.0 carat diamond actually represents the back-converted predicted log10-price for that diamond.\r\nIn fact, any statistical computations (e.g., fitted line, mean, median, error bars) applied to the data will always occur AFTER the transformation of scales. That is, the statistics will be computed on the log-transformed data!\r\nMethod 3. Transformation of coordinates\r\nThe third method is transformation of coordinates. This is done by specifying the transformation for the x and/or y axis in coord_trans():\r\n\r\n\r\nggplot(diamonds, aes(x = carat, y = price)) +\r\n  geom_point() +\r\n  coord_trans(x = \"log10\", y = \"log10\") +\r\n  theme_classic(base_size = 13)\r\n\r\n\r\n\r\n\r\nYou can see that the axes display original values, same as what we have seen in the second method. But it is pretty obvious that the tick marks are not equally-spaced, different from the second method (take a quick look back at the previous plot!).\r\nIndeed, what this third method does is that it converts the original linear axes into log axes and shifts the original tick marks (which are equally-spaced with equally-distanced numbers) to the new corresponding log positions (which of course will not be equally-spaced but the corresponding numbers are still the same). As a result, the numbers on the tick marks are equally-distanced yet the tick marks themselves are not equally-spaced.\r\nNow we call stat_smooth() to fit a line:\r\n\r\n\r\nggplot(diamonds, aes(x = carat, y = price)) +\r\n  geom_point() +\r\n  stat_smooth(method = \"lm\", se = F) +\r\n  coord_trans(x = \"log10\", y = \"log10\", ylim = c(min(diamonds$price), NA)) + # Need to specify the lower limit for y-axis!\r\n  theme_classic(base_size = 13)\r\n\r\n\r\n\r\n\r\nWhat! The line is not straight?! Yup, it is not straight. Your vision is fine! So why is that?\r\nThis is because the line is fitted using the original price and carat rather than the log-transformed data (i.e., price~carat, not log10(price) ~ log10(carat) !!!), after which the predicted price is then log-transformed and drawn on the plot. So after the transformation, the line will no longer be straight.\r\nDifferent from the second method, in this third method, any statistical computations applied to the data will always occur BEFORE the transformation of coordinates. That is, the statistics will be computed on the original data and then log-transformed to be shown on the plot!\r\nNote that here I also specify the lower limit (using min price value) for y-axis. Without this, you will get an error message saying something like “missing value where TRUE/FALSE needed”. The line is fitted using the original carat and price as the predictor and the response, and in this example we have some non-positive predicted values. These non-positive values are the culprit: the error arises when ggplot attempts to take log of them (remember the computed statistics will be log-transformed to be drawn on the plot)!\r\n\r\n\r\nlm_diamonds <- lm(price~carat, data = diamonds)\r\npredict(lm_diamonds) %>% head() # Non-positive predicted values exist\r\n\r\n\r\n          1           2           3           4           5 \r\n-472.382688 -627.511200 -472.382688   -6.997151  148.131362 \r\n          6 \r\n-394.818432 \r\n\r\npredict(lm_diamonds) %>% log10() %>% head() # NaNs produced when you take log of the non-positive values \r\n\r\n\r\n       1        2        3        4        5        6 \r\n     NaN      NaN      NaN      NaN 2.170647      NaN \r\n\r\nFor the second method (transformation of scales), in which the line is fitted and drawn after log transformation, there is no such problem because the predicted values (of course can be non-positive) do not need to undergo transformation again, and so you will always get a straight line!\r\nWhich transformation method to use?\r\nStill confused? In the following table, I summarize the similarities/differences among the three log transformation methods we have discussed:\r\n\r\n\r\n\r\n\r\nTransformation of variables\r\n\r\n\r\nTransformation of scales\r\n\r\n\r\nTransformation of coordinates\r\n\r\n\r\nAxis values\r\n\r\n\r\nTransformed\r\n\r\n\r\nOriginal\r\n\r\n\r\nOriginal\r\n\r\n\r\nAxis tick marks\r\n\r\n\r\nEqually-spaced\r\n\r\n\r\nEqually-spaced\r\n\r\n\r\nNot equally-spaced\r\n\r\n\r\nNumbers on tick marks\r\n\r\n\r\nEqually-distanced\r\n\r\n\r\nNot equally-distanced\r\n\r\n\r\nEqually-distanced\r\n\r\n\r\nStatistical computations\r\n\r\n\r\nAfter transformation\r\n\r\n\r\nAfter transformation\r\n\r\n\r\nBefore transformation\r\n\r\n\r\nShape of geoms\r\n\r\n\r\nNot affected\r\n\r\n\r\nNot affected\r\n\r\n\r\nMight be affected*\r\n\r\n\r\n*E.g., the fitted straight line becomes curved.\r\n And here is a simple dichotomous key to which method to use for your figures (of course it is my opinion, not the standard rule!):\r\nYou are fine with log-transformed axis values…………………….. Method 1\r\nYou want your axis to display original values…………………………………2\r\nYou want to preserve the shape of geoms and it is okay for the statistics to be computed on the log-transformed data (geom-focused)………Method 2\r\nYou want the statistics to be computed on the original data and it is okay to have the shape of geoms altered (stat-focused)…………………..Method 3\r\n\r\n\r\nd-article p span#aaa:before { \r\n  content: \"1a. \"; \r\n  display: inline-block;\r\n  margin-left: -2em;\r\n  margin-right: 0.5em;\r\n}\r\n\r\nd-article p span#bbb:before { \r\n  content: \"1b. \"; \r\n  display: inline-block;\r\n  margin-left: -2em;\r\n  margin-right: 0.5em;\r\n}\r\n\r\nd-article p span#ccc:before { \r\n  content: \"2a. \"; \r\n  display: inline-block;\r\n  margin-left: -2em;\r\n  margin-right: 0.5em;\r\n}\r\n\r\nd-article p span#ddd:before { \r\n  content: \"2b. \"; \r\n  display: inline-block;\r\n  margin-left: -2em;\r\n  margin-right: 0.5em;\r\n}\r\n\r\nd-article table.lightable-paper {\r\n  margin-bottom: 0px; \r\n}\r\n\r\nThis is the end of this rather long post. Hooray! Hope it is worth the time and you do learn something useful. And as always, don’t forget to leave your comments and suggestions below if you have any!\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-05-07-post-2-three-ways-to-create-log-axes-in-ggplots-which-one-should-you-use/../../homepage_images/Post2.png",
    "last_modified": "2021-06-07T19:33:34-07:00",
    "input_file": {},
    "preview_width": 960,
    "preview_height": 576
  },
  {
    "path": "posts/2021-05-01-post-1-center-long-legend-titles-in-ggplots/",
    "title": "Post #1. Center long legend titles in ggplots",
    "description": "In this post, I will show you a simple quick hack to center long legend titles in ggplots without bothering gtables and grobs.",
    "author": [
      {
        "name": "Gen-Chang Hsu",
        "url": {}
      }
    ],
    "date": "2021-05-01",
    "categories": [
      "2021"
    ],
    "contents": "\r\n\r\n\r\nd-article a {\r\n    color: #2780e3 !important;\r\n    border-bottom: none !important;\r\n}\r\n\r\nd-article a:hover {\r\n    color: #2780e3 !important;\r\n    border-bottom: 2px solid !important;\r\n}\r\n\r\nd-byline {\r\n    margin-left: -10% !important;\r\n}\r\n\r\nd-title {\r\n    margin-left: -10%;\r\n}\r\n\r\nd-title h1{\r\n    font-size: 45px;\r\n    width: 130%;\r\n}\r\n\r\nd-article {\r\n    margin-left: -10%;\r\n}\r\n\r\np {\r\n    width: 120%;\r\n}\r\n\r\nd-article h2 {\r\n    width: 120%;\r\n}\r\n\r\ndiv.article-footer{\r\n    width: 120%;\r\n}\r\n\r\nd-article div.sourceCode { \r\n    width: 120% !important;\r\n}\r\n\r\nd-article pre { \r\n    width: 120% !important;\r\n}\r\n\r\ndiv.l-body {\r\n    width: 120% !important;\r\n}\r\n\r\nBefore we start\r\n“Blogenesis”! This is the origin of my first ggGallery blog post! Feel excited to write about something in which I am interested. This very first post is a simple one, but I bet it will be pretty handy. Hope you learn something from this post. Most importantly, enjoy the reading!\r\nThe problem\r\nWhen making a ggplot with legend, the legend title is left-aligned by default:\r\n\r\n\r\nlibrary(tidyverse)\r\n\r\nggplot(mtcars, aes(wt, mpg)) + \r\n  geom_point(aes(colour = factor(cyl))) + \r\n  geom_smooth(aes(colour = factor(cyl)), method = \"lm\", se = F) +\r\n  scale_color_discrete(name = \"Cyl\", \r\n                       label = c(\"Four\", \"Six\", \"Eight\")) + \r\n  theme_classic(base_size = 13)\r\n\r\n\r\n\r\n\r\nIf you are happy with it, then fine. But oftentimes, we would like to align the legend title to the center so that the legend looks more balanced. For short titles, this is easy to achieve, just use theme(legend.title.align = 0.5):\r\n\r\n\r\nggplot(mtcars, aes(wt, mpg)) + \r\n  geom_point(aes(colour = factor(cyl))) + \r\n  geom_smooth(aes(colour = factor(cyl)), method = \"lm\", se = F) +\r\n  scale_color_discrete(name = \"Cyl\", \r\n                       label = c(\"Four\", \"Six\", \"Eight\")) + \r\n  theme_classic(base_size = 13) + \r\n  theme(legend.title.align = 0.5) # Align the title to the center\r\n\r\n\r\n\r\n\r\nHowever, for legend titles that are longer than the legend keys and labels, this method does not work:\r\n\r\n\r\nggplot(mtcars, aes(wt, mpg)) + \r\n  geom_point(aes(colour = factor(cyl))) + \r\n  geom_smooth(aes(colour = factor(cyl)), method = \"lm\", se = F) +\r\n  scale_color_discrete(name = \"Number of cylinders\", \r\n                       label = c(\"Four\", \"Six\", \"Eight\")) + \r\n  theme_classic(base_size = 13) + \r\n  theme(legend.title.align = 0.5) # Not work!\r\n\r\n\r\n\r\n\r\nThere is a solution to this problem on stackoverflow. Basically, what it does is to extract the individual elements from the legend grobs, add extra space, and finally piece them back together. This method really delves into the heart of ggplots, but such “brute force” method might require quite a bit of time as well as decent understandings of how ggplot legends is built.\r\nSo isn’t there a simpler and more elegant way to do so?\r\nThe hack\r\nThe answer to this question is a complete no-brainer: Yes! Otherwise, I will not be writing this blog, right?! Here is the hack: just use “negative” left margin around the legend title:\r\n\r\n\r\nggplot(mtcars, aes(wt, mpg)) + \r\n  geom_point(aes(colour = factor(cyl))) + \r\n  geom_smooth(aes(colour = factor(cyl)), method = \"lm\", se = F) +\r\n  scale_color_discrete(name = \"Number of cylinders\", \r\n                       label = c(\"Four\", \"Six\", \"Eight\")) + \r\n  theme_classic(base_size = 13) + \r\n  theme(legend.title = element_text(margin = margin(l = -25))) # Negative left margin\r\n\r\n\r\n\r\n\r\nNow the title lies nicely in the center of the legend. Hooray!\r\nThe explanation\r\nSo how does negative margin work? Let’s visualize it by showing the legend box border. By default, there is no margin around the title, which will fit just right within the box border:\r\n\r\n\r\n# Default left margin\r\nggplot(mtcars, aes(wt, mpg)) + \r\n  geom_point(aes(colour = factor(cyl))) + \r\n  geom_smooth(aes(colour = factor(cyl)), method = \"lm\", se = F) +\r\n  scale_color_discrete(name = \"Number of cylinders\", \r\n                       label = c(\"Four\", \"Six\", \"Eight\")) + \r\n  theme_classic(base_size = 13) + \r\n  theme(legend.title = element_text(margin = margin(l = 0)), \r\n        legend.background = element_rect(color = \"black\")) +\r\n  labs(title = \"Default margin\")\r\n\r\n\r\n\r\n\r\nIf you specify a positive left margin, then there will be extra space added between the title and left box border:\r\n\r\n\r\n# Positive left margin\r\nggplot(mtcars, aes(wt, mpg)) + \r\n  geom_point(aes(colour = factor(cyl))) + \r\n  geom_smooth(aes(colour = factor(cyl)), method = \"lm\", se = F) +\r\n  scale_color_discrete(name = \"Number of cylinders\", \r\n                       label = c(\"Four\", \"Six\", \"Eight\")) + \r\n  theme_classic(base_size = 13) + \r\n  theme(legend.title = element_text(margin = margin(l = 25)),\r\n        legend.background = element_rect(color = \"black\")) +\r\n  labs(title = \"Positive left margin\")\r\n\r\n\r\n\r\n\r\nBut if you specify a negative margin, then you are asking ggplot to add some “negative” space between the title and left box border, and what that means is that ggplot will “pull” the title toward left beyond the box border:\r\n\r\n\r\n# Negative left margin\r\nggplot(mtcars, aes(wt, mpg)) + \r\n  geom_point(aes(colour = factor(cyl))) + \r\n  geom_smooth(aes(colour = factor(cyl)), method = \"lm\", se = F) +\r\n  scale_color_discrete(name = \"Number of cylinders\", \r\n                       label = c(\"Four\", \"Six\", \"Eight\")) + \r\n  theme_classic(base_size = 12) + \r\n  theme(legend.title = element_text(margin = margin(l = -25)),\r\n        legend.background = element_rect(color = \"black\")) +\r\n  labs(title = \"Negative left margin\")\r\n\r\n\r\n\r\n\r\nAnd after removing the box border, you will find that the title just moves to the center of the legend!\r\nFinally, I think you might ask: what negative margin value should I specify? The answer is: it depends! It really depends on the relative length of your title to your legend keys and labels, and so you might need to try out a few different values and see how it goes. Though this might seem a bit tedious, it offers you the most flexibility to place your title at the exact position you desire. It is worth the effort!\r\nDefinitely try this tip out next time. And if you have any further ideas or questions, don’t forget to leave them below!\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-05-01-post-1-center-long-legend-titles-in-ggplots/../../homepage_images/Post1.png",
    "last_modified": "2021-06-07T19:27:27-07:00",
    "input_file": {},
    "preview_width": 1152,
    "preview_height": 672
  }
]
