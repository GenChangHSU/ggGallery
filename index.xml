<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>ggGallery</title>
    <link>https://genchanghsu.github.io/ggGallery/</link>
    <atom:link href="https://genchanghsu.github.io/ggGallery/index.xml" rel="self" type="application/rss+xml"/>
    <description>A gallery of ggplots and beyond
</description>
    <generator>Distill</generator>
    <lastBuildDate>Sat, 10 Sep 2022 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Post #19. Go with the flow - alluvial diagrams in ggplot</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2022-09-10-post-19-go-with-the-flow-alluvial-plots-with-ggplot</link>
      <description>


&lt;!-- Webpage style --&gt;
&lt;style&gt;
d-article a {
    color: #2780e3 !important;
    border-bottom: none !important;
}

d-article a:hover {
    color: #2780e3 !important;
    border-bottom: 2px solid !important;
}

d-byline {
    margin-left: -10% !important;
}

d-title {
    margin-left: -10%;
}

d-title h1{
    font-size: 45px;
    width: 130%;
}

d-article {
    margin-left: -10%;
}

p {
    width: 120%;
}

d-article h2 {
    width: 120%;
}

d-article h3 {
  width: 120%;
  font-size: 28px;
}

div.article-footer{
    width: 120%;
}

d-article div.sourceCode { 
    width: 120% !important;
}

d-article pre { 
    width: 120% !important;
}

div.l-body {
    width: 120% !important;
}

div.l-body img {
    margin-right: 20% !important;
}

&lt;/style&gt;
&lt;!-- Start of the article --&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Alluvial_diagram"&gt;Alluvial
diagrams&lt;/a&gt; are a type of chart that shows the relationships between
categorical variables for a given quantity (number of people, amount of
energy, etc.) They look like a stacked barplot with flow streams
connecting the stacks of adjacent bars (that’s why it gets its name!).
These diagrams are useful for visualizing pathways and trends across
variables. Another similar chart is &lt;a
href="https://genchanghsu.github.io/ggGallery/posts/2022-08-01-post-18-bump-charts-with-ggplot/"&gt;bump
charts&lt;/a&gt;, which emphasize the change in rankings of multiple objects
over time.&lt;/p&gt;
&lt;h2 id="create-alluvial-diagrams-with-ggalluvial"&gt;Create alluvial
diagrams with &lt;code&gt;ggalluvial&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;We’ll be using the extension package &lt;a
href="https://corybrunson.github.io/ggalluvial/"&gt;&lt;code&gt;ggalluvial&lt;/code&gt;&lt;/a&gt;
to create alluvial diagrams in ggplot. The functions in
&lt;code&gt;ggalluvial&lt;/code&gt; can take data in both wide and long format, and
we’ll start with the wide format here.&lt;/p&gt;
&lt;h3 id="working-with-wide-format-data"&gt;Working with wide format
data&lt;/h3&gt;
&lt;p&gt;First, let’s prepare our example data using the &lt;code&gt;diamonds&lt;/code&gt;
dataset: We’ll classify the carat of the diamonds into “Large” and
“Small” as well as the price into “Low”, “Mid”, and “High”, and then
tally the numbers of diamonds by carat, cut, and price.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(tidyverse)

# Prepare wide format diamonds data
diamonds_wide &amp;lt;- diamonds %&amp;gt;% 
  mutate(price_cat = case_when(price &amp;lt; quantile(price, 0.33) ~ &amp;quot;Low&amp;quot;,
                               price &amp;gt; quantile(price, 0.67) ~ &amp;quot;High&amp;quot;,
                               TRUE ~ &amp;quot;Mid&amp;quot;),
         price_cat = factor(price_cat, levels = c(&amp;quot;High&amp;quot;, &amp;quot;Mid&amp;quot;, &amp;quot;Low&amp;quot;)),
         carat_cat = ifelse(carat &amp;gt; median(carat), &amp;quot;Large&amp;quot;, &amp;quot;Small&amp;quot;),
         cut = fct_rev(cut)) %&amp;gt;% 
  group_by(carat_cat, cut, price_cat) %&amp;gt;%
  summarise(count = n()) %&amp;gt;% 
  ungroup()

head(diamonds_wide)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 x 4
  carat_cat cut       price_cat count
  &amp;lt;chr&amp;gt;     &amp;lt;ord&amp;gt;     &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;
1 Large     Ideal     High       5808
2 Large     Ideal     Mid        2648
3 Large     Premium   High       5649
4 Large     Premium   Mid        2283
5 Large     Premium   Low           2
6 Large     Very Good High       4135&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Now having the appropriate data on hand, we can visualize the
relationships between carat, cut, and price in an alluvial diagram.
There are a few things worth noting in the below code chunk:&lt;/p&gt;
&lt;p&gt;&lt;span id="aa"
style="display: block; margin-top: 0px; margin-left: 50px"&gt;The flow
streams and bars are drawn using &lt;code&gt;geom_alluvium()&lt;/code&gt; and
&lt;code&gt;geom_stratum()&lt;/code&gt;, respectively&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id="bb"
style="display: block; margin-top: 5px; margin-left: 50px"&gt;The bars are
positioned along the horizontal axis using the arguments
&lt;code&gt;aes(axis1 = carat_cat, axis2 = cut, axis3 = price_cat)&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id="cc"
style="display: block; margin-top: 5px; margin-left: 50px"&gt;The function
&lt;code&gt;geom_stratum()&lt;/code&gt; will create a new internal variable
“&lt;code&gt;stratum&lt;/code&gt;” that can be used to label the bars via the
argument &lt;code&gt;aes(label = after_stat(stratum))&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id="dd"
style="display: block; margin-top: 5px; margin-left: 50px"&gt;The flow
streams are colored by price&lt;/span&gt;&lt;/p&gt;
&lt;style&gt;

d-article p span#aa:before { 
  content: "(1) "; 
  display: inline-block;
  margin-left: -1.5em;
  margin-right: 0.3em;
}

d-article p span#bb:before { 
  content: "(2) "; 
  display: inline-block;
  margin-left: -1.5em;
  margin-right: 0.3em;
}

d-article p span#cc:before { 
  content: "(3) "; 
  display: inline-block;
  margin-left: -1.5em;
  margin-right: 0.3em;
}

d-article p span#dd:before { 
  content: "(3) "; 
  display: inline-block;
  margin-left: -1.5em;
  margin-right: 0.3em;
}

d-article table.lightable-paper {
  margin-bottom: 0px; 
}

&lt;/style&gt;
&lt;pre class="r"&gt;&lt;code&gt;# install.packages(&amp;quot;ggalluvial&amp;quot;)  # install the package if you haven&amp;#39;t
library(ggalluvial)
library(scales)  # for the function &amp;quot;comma_format()&amp;quot;

ggplot(diamonds_wide, aes(axis1 = carat_cat, axis2 = cut, axis3 = price_cat, y = count)) +
  geom_alluvium(aes(fill = price_cat), width = 1/5) +
  geom_stratum(width = 1/5, fill = &amp;quot;#fee6ce&amp;quot;, color = &amp;quot;grey30&amp;quot;) +
  geom_text(stat = &amp;quot;stratum&amp;quot;, aes(label = after_stat(stratum)), size = 2.5) +
  scale_x_discrete(limits = c(&amp;quot;Carat&amp;quot;, &amp;quot;Cut&amp;quot;, &amp;quot;Price&amp;quot;), expand = c(0, 0.2)) +
  scale_y_continuous(expand = c(0, 0), labels = comma_format()) + 
  labs(y = &amp;quot;Count&amp;quot;) + 
  scale_fill_brewer(name = &amp;quot;Price&amp;quot;, palette = &amp;quot;Set1&amp;quot;) + 
  theme_classic(base_size = 13) + 
  theme(axis.line.x = element_blank(),
        axis.ticks.x = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file2abc3b403f1a_files/figure-html/unnamed-chunk-2-1.png" width="85%" style="display: block; margin: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;It seems that no large diamond has a low price and no small diamond
has a high price, regardless of the cut quality.&lt;/p&gt;
&lt;p&gt;From this plot, we can further produce the so-called &lt;a
href="https://dataforvisualization.com/charts/parallel-sets-plot/"&gt;“parallel
sets”&lt;/a&gt; by adjusting the width of the bars, the knot position (the
inflection point) of the flow streams, and the orientation of the
diagram:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ggplot(diamonds_wide, aes(axis1 = carat_cat, axis2 = cut, axis3 = price_cat, y = count)) +
  geom_alluvium(aes(fill = price_cat), width = 0, knot.pos = 0, show.legend = F) +  # knot.pos = 0 generates straight flow streams
  geom_stratum(width = 0.02, fill = &amp;quot;black&amp;quot;, color = &amp;quot;white&amp;quot;) +  # reduce the bar width to create thick lines
  geom_text(stat = &amp;quot;stratum&amp;quot;, aes(label = after_stat(stratum)), size = 2.5, nudge_x = 0.05) +
  scale_x_discrete(limits = c(&amp;quot;Carat&amp;quot;, &amp;quot;Cut&amp;quot;, &amp;quot;Price&amp;quot;), expand = c(0, 0.1)) +
  scale_y_continuous(expand = c(0, 0), labels = comma_format()) + 
  labs(y = &amp;quot;Count&amp;quot;) + 
  scale_fill_brewer(palette = &amp;quot;Set1&amp;quot;) + 
  coord_flip() +  # change the orientation of the diagram
  theme_classic(base_size = 13) + 
  theme(axis.line.y = element_blank(),
        axis.ticks.y = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file2abc3b403f1a_files/figure-html/unnamed-chunk-3-1.png" width="75%" style="display: block; margin: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="working-with-long-format-data"&gt;Working with long format
data&lt;/h3&gt;
&lt;p&gt;As mentioned earlier, &lt;code&gt;ggalluvial&lt;/code&gt; also works with data in
long format. So let’s convert the data now. Note that we need to add an
ID column to the dataframe before melting it into long format. These
ID’s will tell the functions how to connect the flows between adjacent
bars (each ID represents a flow stream across all the bars from left to
right).&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# Convert the wide data into long format
diamonds_long &amp;lt;- diamonds_wide %&amp;gt;%
  mutate(alluvium_ID = row_number()) %&amp;gt;%  # add an ID for each row
  pivot_longer(cols = -c(count, alluvium_ID), names_to = &amp;quot;variable&amp;quot;, values_to = &amp;quot;level&amp;quot;) %&amp;gt;% 
  mutate(level = factor(level, levels = c(&amp;quot;Large&amp;quot;, &amp;quot;Small&amp;quot;, &amp;quot;Ideal&amp;quot;, &amp;quot;Premium&amp;quot;, &amp;quot;Very Good&amp;quot;, &amp;quot;Good&amp;quot;, &amp;quot;Fair&amp;quot;, &amp;quot;High&amp;quot;, &amp;quot;Mid&amp;quot;, &amp;quot;Low&amp;quot;)))  # adjust the level order for later plotting

head(diamonds_long)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 x 4
  count alluvium_ID variable  level
  &amp;lt;int&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;fct&amp;gt;
1  5808           1 carat_cat Large
2  5808           1 cut       Ideal
3  5808           1 price_cat High 
4  2648           2 carat_cat Large
5  2648           2 cut       Ideal
6  2648           2 price_cat Mid  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Great. It’s time to make the diagram! As the data are now in long
format, the argument specifications are a bit different from those we
used for previous plots:&lt;/p&gt;
&lt;p&gt;&lt;span id="aaa"
style="display: block; margin-top: 0px; margin-left: 50px"&gt;The flow
streams are drawn using &lt;code&gt;geom_flow()&lt;/code&gt; instead of
&lt;code&gt;geom_alluvium()&lt;/code&gt;, and the alluvium ID’s are specified via
the argument &lt;code&gt;aes(alluvium = alluvium_ID)&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id="bbb"
style="display: block; margin-top: 5px; margin-left: 50px"&gt;The positions
of the bars along the x-axis are specified via
&lt;code&gt;aes(x = variable)&lt;/code&gt;, and the stacks of the bars are specified
via &lt;code&gt;aes(stratum = level)&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id="ccc"
style="display: block; margin-top: 5px; margin-left: 50px"&gt;The bars are
labeled directly via the argument &lt;code&gt;aes(label = )&lt;/code&gt; without
having to call &lt;code&gt;after_stat()&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;style&gt;

d-article p span#aaa:before { 
  content: "(1) "; 
  display: inline-block;
  margin-left: -1.5em;
  margin-right: 0.3em;
}

d-article p span#bbb:before { 
  content: "(2) "; 
  display: inline-block;
  margin-left: -1.5em;
  margin-right: 0.3em;
}

d-article p span#ccc:before { 
  content: "(3) "; 
  display: inline-block;
  margin-left: -1.5em;
  margin-right: 0.3em;
}

d-article table.lightable-paper {
  margin-bottom: 0px; 
}

&lt;/style&gt;
&lt;pre class="r"&gt;&lt;code&gt;# Create a color palette for the bars
color_pal &amp;lt;- set_names(c(&amp;quot;#bdbdbd&amp;quot;, &amp;quot;#525252&amp;quot;, &amp;quot;#fde725&amp;quot;, &amp;quot;#7ad151&amp;quot;, &amp;quot;#22a884&amp;quot;, &amp;quot;#2a788e&amp;quot;, &amp;quot;#414487&amp;quot;, &amp;quot;#e41a1c&amp;quot;, &amp;quot;#377eb8&amp;quot;, &amp;quot;#4daf4a&amp;quot;), nm = levels(diamonds_long$level))

ggplot(diamonds_long, aes(x = variable, y = count, stratum = level, alluvium = alluvium_ID)) +
  geom_flow(aes(fill = level), width = 1/5) +
  geom_stratum(aes(fill = level), alpha = 0.75, width = 1/5) +
  geom_text(stat = &amp;quot;stratum&amp;quot;, aes(label = level), size = 3) +
  scale_x_discrete(labels = c(&amp;quot;Carat&amp;quot;, &amp;quot;Cut&amp;quot;, &amp;quot;Price&amp;quot;), expand = c(0, 0.2)) +
  scale_y_continuous(expand = c(0, 0), labels = comma_format()) + 
  labs(x = &amp;quot;&amp;quot;, y = &amp;quot;Count&amp;quot;) +
  guides(fill = &amp;quot;none&amp;quot;) + 
  scale_fill_manual(values = color_pal) +
  theme_classic(base_size = 13) + 
  theme(axis.line.x = element_blank(),
        axis.ticks.x = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file2abc3b403f1a_files/figure-html/unnamed-chunk-5-1.png" width="75%" style="display: block; margin: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;Do you notice the difference from the previous alluvial diagrams
created with wide format data? You’re right! The bars and flows have
their own colors now! With this method, we are able to color the bars
and the flows between adjacent bars by their corresponding levels (the
flow color will be the same as that of the bar stack where the flow
originates).&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;To recap what we’ve done in this post, we started by creating a
standard alluvial diagram with wide format &lt;code&gt;diamonds&lt;/code&gt; data
using the package &lt;code&gt;ggalluvial&lt;/code&gt;. We then modified the diagram
to produce parallel sets. Finally, we converted the data into long
format and created another alluvial diagram that had different bar and
flow colors.&lt;/p&gt;
&lt;p&gt;As mentioned in the beginning, alluvial diagrams are best for
visualizing the relationships between categorical variables. And if the
bars along the axis are ordered by time, distance, or some kind of
factor gradients, then they can help reveal trends.&lt;/p&gt;
&lt;p&gt;Hope you learn something useful from this post and don’t forget to
leave your comments and suggestions below if you have any!&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>f91b88434751f8fa953ac7a5683571b0</distill:md5>
      <category>2022</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2022-09-10-post-19-go-with-the-flow-alluvial-plots-with-ggplot</guid>
      <pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2022-09-10-post-19-go-with-the-flow-alluvial-plots-with-ggplot/../../homepage_images/Post19.png" medium="image" type="image/png" width="1536" height="864"/>
    </item>
    <item>
      <title>Post #18. Bump charts with ggplot</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2022-08-01-post-18-bump-charts-with-ggplot</link>
      <description>Come and learn how to create nice bump charts with ggplot!</description>
      <category>2022</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2022-08-01-post-18-bump-charts-with-ggplot</guid>
      <pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2022-08-01-post-18-bump-charts-with-ggplot/../../homepage_images/Post18.png" medium="image" type="image/png" width="1728" height="960"/>
    </item>
    <item>
      <title>Post #17. ggplot Legend Tips Series No.6: Working on continuous legends with scale_XX functions</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2022-07-02-post-17-ggplot-legend-tips-series-no6-working-on-continuous-legends-with-scalexx-functions</link>
      <description>In this post, you will learn how to modify the appearance of continuous legends in ggplots using `scale_XX` family of functions.</description>
      <category>2022</category>
      <category>Legend Tips Series</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2022-07-02-post-17-ggplot-legend-tips-series-no6-working-on-continuous-legends-with-scalexx-functions</guid>
      <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2022-07-02-post-17-ggplot-legend-tips-series-no6-working-on-continuous-legends-with-scalexx-functions/../../homepage_images/Post17.png" medium="image" type="image/png" width="960" height="672"/>
    </item>
    <item>
      <title>Post #16. ggplot Legend Tips Series No.5: Working on discrete legends with scale_XX functions</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2022-06-09-post-16-ggplot-legend-tips-series-no5-working-on-discrete-legends-with-scalexx-functions</link>
      <description>In this post, you will learn how to modify the appearance of discrete legends in ggplots using `scale_XX` family of functions.</description>
      <category>2022</category>
      <category>Legend Tips Series</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2022-06-09-post-16-ggplot-legend-tips-series-no5-working-on-discrete-legends-with-scalexx-functions</guid>
      <pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2022-06-09-post-16-ggplot-legend-tips-series-no5-working-on-discrete-legends-with-scalexx-functions/../../homepage_images/Post16.png" medium="image" type="image/png" width="1152" height="672"/>
    </item>
    <item>
      <title>Post #15. Manipulating the axes for individual facets with `tidytext` and `ggh4x`</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2022-05-12-post-15-manipulating-axis-scales-for-individual-facets</link>
      <description>Bothered by the hassle of manipulating the axes for individual facets? This is the post for you!</description>
      <category>2022</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2022-05-12-post-15-manipulating-axis-scales-for-individual-facets</guid>
      <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2022-05-12-post-15-manipulating-axis-scales-for-individual-facets/../../homepage_images/Post15.png" medium="image" type="image/png" width="960" height="768"/>
    </item>
    <item>
      <title>Post #14. Multiple color scales in one ggplot</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2022-04-24-post-14-multiple-color-scales-in-one-ggplot</link>
      <description>Using different color scales for multiple geom layers in one ggplot with `ggnewscale` and `relayer`</description>
      <category>2022</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2022-04-24-post-14-multiple-color-scales-in-one-ggplot</guid>
      <pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2022-04-24-post-14-multiple-color-scales-in-one-ggplot/../../homepage_images/Post14.png" medium="image" type="image/png" width="1056" height="672"/>
    </item>
    <item>
      <title>Post #13. ggplot Legend Tips Series No.4: Merging ggplot legends</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2022-03-02-post-13-ggplot-legend-tips-series-no4-merging-ggplot-legends</link>
      <description>Come and learn two handy tips to merge two ggplot legends into one!</description>
      <category>2022</category>
      <category>Legend Tips Series</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2022-03-02-post-13-ggplot-legend-tips-series-no4-merging-ggplot-legends</guid>
      <pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2022-03-02-post-13-ggplot-legend-tips-series-no4-merging-ggplot-legends/../../homepage_images/Post13.png" medium="image" type="image/png" width="960" height="576"/>
    </item>
    <item>
      <title>Post #12. ggplot Legend Tips Series No.3: Three ways to turn off the legends in ggplots</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2022-02-05-post-12-ggplot-legend-tips-series-no3-three-ways-to-turn-off-ggplot-legends</link>
      <description>Come and learn three handy tips to turn off the legends in ggplots!</description>
      <category>2022</category>
      <category>Legend Tips Series</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2022-02-05-post-12-ggplot-legend-tips-series-no3-three-ways-to-turn-off-ggplot-legends</guid>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2022-02-05-post-12-ggplot-legend-tips-series-no3-three-ways-to-turn-off-ggplot-legends/../../homepage_images/Post12.png" medium="image" type="image/png" width="768" height="576"/>
    </item>
    <item>
      <title>Post #11. ggplot Legend Tips Series No.2: Working on continuous legends with guides()</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2022-02-01-post-11-ggplot-legend-tips-series-no2-working-on-continuous-legends-with-guides</link>
      <description>In this post, you will learn how to tweak the appearance of continuous legends in ggplots with `guides()`.</description>
      <category>2022</category>
      <category>Legend Tips Series</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2022-02-01-post-11-ggplot-legend-tips-series-no2-working-on-continuous-legends-with-guides</guid>
      <pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2022-02-01-post-11-ggplot-legend-tips-series-no2-working-on-continuous-legends-with-guides/../../homepage_images/Post11.png" medium="image" type="image/png" width="960" height="576"/>
    </item>
    <item>
      <title>Post #10. ggplot Legend Tips Series No.1: Working on discrete legends with guides()</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2022-01-28-post-10-ggplot-legend-tips-series-no1-working-on-discrete-scale-legends-with-guides</link>
      <description>In this post, you will learn how to tweak the appearance of discrete legends in ggplots with `guides()`.</description>
      <category>2022</category>
      <category>Legend Tips Series</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2022-01-28-post-10-ggplot-legend-tips-series-no1-working-on-discrete-scale-legends-with-guides</guid>
      <pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2022-01-28-post-10-ggplot-legend-tips-series-no1-working-on-discrete-scale-legends-with-guides/../../homepage_images/Post10.png" medium="image" type="image/png" width="960" height="576"/>
    </item>
    <item>
      <title>Post #9. Arrange multiple ggplots on one graphic device</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-12-20-post-9-arrange-multiple-ggplots</link>
      <description>Come and learn two methods to arrange multiple ggplots on one graphic device.</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-12-20-post-9-arrange-multiple-ggplots</guid>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-12-20-post-9-arrange-multiple-ggplots/../../homepage_images/Post9.png" medium="image" type="image/png" width="1152" height="1152"/>
    </item>
    <item>
      <title>Post #8. Pokemon phylogeny with ggdendro</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-10-01-post-8-pokemon-phylogeny-with-ggdendro</link>
      <description>Create a Pokemon phylogenetic tree in ggplot with the extension package ggdendro.</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-10-01-post-8-pokemon-phylogeny-with-ggdendro</guid>
      <pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-10-01-post-8-pokemon-phylogeny-with-ggdendro/../../homepage_images/Post8.png" medium="image" type="image/png" width="960" height="960"/>
    </item>
    <item>
      <title>Post #7. Customize the axis scales for individual ggplot facets</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-09-11-post-7-customize-the-axis-scales-for-individual-facets</link>
      <description>Come and learn how to customize the axis scales (axis limits, tick breaks, and tick labels) for individual ggplot facets!</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-09-11-post-7-customize-the-axis-scales-for-individual-facets</guid>
      <pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-09-11-post-7-customize-the-axis-scales-for-individual-facets/../../homepage_images/Post7.png" medium="image" type="image/png" width="1152" height="768"/>
    </item>
    <item>
      <title>Post #6. Play good music for your data - violin plots with ggplot</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-08-02-post-6-play-good-music-for-your-data-violin-plots-with-ggplot</link>
      <description>Visualize data distributions using violin plots with ggplot.</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-08-02-post-6-play-good-music-for-your-data-violin-plots-with-ggplot</guid>
      <pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-08-02-post-6-play-good-music-for-your-data-violin-plots-with-ggplot/../../homepage_images/Post6.png" medium="image" type="image/png" width="960" height="576"/>
    </item>
    <item>
      <title>Post #5. Awesome text displays with ggtext</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-07-10-post-5-awesome-text-display-with-ggtext</link>
      <description>Enhance text displays in your ggplots with the extension package ggtext!</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-07-10-post-5-awesome-text-display-with-ggtext</guid>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-07-10-post-5-awesome-text-display-with-ggtext/../../homepage_images/Post5.png" medium="image" type="image/png" width="1152" height="1152"/>
    </item>
    <item>
      <title>Post #4. Consistent colors of the same factor levels across figures</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-06-26-post-4-consistent-colors-of-the-same-factor-levels-across-figures</link>
      <description>In this post, I will show you a simple trick to keep the colors of the same factor levels consistent across different ggplot figures.</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-06-26-post-4-consistent-colors-of-the-same-factor-levels-across-figures</guid>
      <pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-06-26-post-4-consistent-colors-of-the-same-factor-levels-across-figures/../../homepage_images/Post4.png" medium="image" type="image/png" width="960" height="576"/>
    </item>
    <item>
      <title>Post #3. Pie charts with ggplot</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-06-18-post-3-pie-charts-with-ggplot</link>
      <description>Want to know how to create effective pie charts with ggplot? Dig in to learn more!</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-06-18-post-3-pie-charts-with-ggplot</guid>
      <pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-06-18-post-3-pie-charts-with-ggplot/../../homepage_images/Post3.png" medium="image" type="image/png" width="960" height="576"/>
    </item>
    <item>
      <title>Guest Post #1. Communicating the ESSENCE of your data</title>
      <dc:creator>William Ou</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-05-26-guest-post-1-communicating-the-essence-of-your-data</link>
      <description>Visualizing multi-dimensional and dynamic data can be challenging. In this post, I will show how you can better communicate these features with interactive plots and animations.</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-05-26-guest-post-1-communicating-the-essence-of-your-data</guid>
      <pubDate>Wed, 26 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-05-26-guest-post-1-communicating-the-essence-of-your-data/../../homepage_images/Guest_post1.gif" medium="image" type="image/gif"/>
    </item>
    <item>
      <title>Post #2. Three ways to create log axes in ggplots: which one should you use?</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-05-07-post-2-three-ways-to-create-log-axes-in-ggplots-which-one-should-you-use</link>
      <description>This post shows you three different ways to create log axes in ggplots and provides some suggestions on which method to use for your figures.</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-05-07-post-2-three-ways-to-create-log-axes-in-ggplots-which-one-should-you-use</guid>
      <pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-05-07-post-2-three-ways-to-create-log-axes-in-ggplots-which-one-should-you-use/../../homepage_images/Post2.png" medium="image" type="image/png" width="960" height="576"/>
    </item>
    <item>
      <title>Post #1. Center long legend titles in ggplots</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-05-01-post-1-center-long-legend-titles-in-ggplots</link>
      <description>In this post, I will show you a simple quick hack to center long legend titles in ggplots without bothering gtables and grobs.</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-05-01-post-1-center-long-legend-titles-in-ggplots</guid>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-05-01-post-1-center-long-legend-titles-in-ggplots/../../homepage_images/Post1.png" medium="image" type="image/png" width="1152" height="672"/>
    </item>
  </channel>
</rss>
