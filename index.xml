<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>ggGallery</title>
    <link>https://genchanghsu.github.io/ggGallery/</link>
    <atom:link href="https://genchanghsu.github.io/ggGallery/index.xml" rel="self" type="application/rss+xml"/>
    <description>A gallery of ggplots and beyond
</description>
    <generator>Distill</generator>
    <lastBuildDate>Thu, 12 May 2022 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Post #15. Manipulating the axes for individual facets with `tidytext` and `ggh4x`</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2022-05-12-post-15-manipulating-axis-scales-for-individual-facets</link>
      <description>


&lt;!-- Webpage style --&gt;
&lt;style&gt;
d-article a {
    color: #2780e3 !important;
    border-bottom: none !important;
}

d-article a:hover {
    color: #2780e3 !important;
    border-bottom: 2px solid !important;
}

d-byline {
    margin-left: -10% !important;
}

d-title {
    margin-left: -10%;
}

d-title h1{
    font-size: 45px;
    width: 130%;
}

d-article {
    margin-left: -10%;
}

p {
    width: 120%;
}

d-article h2 {
    width: 120%;
}

d-article h3 {
  width: 120%;
  font-size: 28px;
}

div.article-footer{
    width: 120%;
}

d-article div.sourceCode { 
    width: 120% !important;
}

d-article pre { 
    width: 120% !important;
}

div.l-body {
    width: 120% !important;
}

div.l-body img {
    margin-right: 20% !important;
}

&lt;/style&gt;
&lt;!-- Start of the article --&gt;
&lt;h2 id="background"&gt;Background&lt;/h2&gt;
&lt;p&gt;Faceting is arguably one of the most fantastic features of ggplots—it
can quickly split the data into subsets by the given categorical
variables and visualize these subsets in a grid of panels (facets).
However, fine-tuning individual facets can be quite daunting. For
example, I’ve been trying to reorder the items along the x-axis within
each facet (i.e., different item orders for different facets), or to
adjust the y-axis range and tick marks of some specific facets. These
tasks don’t sound complicated on the surface, but there is actually no
built-in ggplot function/argument to do so.&lt;/p&gt;
&lt;p&gt;After doing some search online, I found two extension packages: &lt;a
href="https://juliasilge.github.io/tidytext/index.html"&gt;&lt;code&gt;tidytext&lt;/code&gt;&lt;/a&gt;
and &lt;a
href="https://teunbrand.github.io/ggh4x/reference/facetted_pos_scales.html"&gt;&lt;code&gt;ggh4x&lt;/code&gt;&lt;/a&gt;,
that have functions to deal with the these issues. I feel that many
ggplot users might have encountered similar problems before, and this is
indeed the motivator for me to write something on them. So in this post,
I’ll share with you the two nice packages and hope they would come in
handy for your own ggplots in the future!&lt;/p&gt;
&lt;h2 id="reorder-items-along-x-axis-for-indiviudual-facets"&gt;1. Reorder
items along x-axis for indiviudual facets&lt;/h2&gt;
&lt;p&gt;Let’s begin by creating a faceted plot using the &lt;a
href="https://ggplot2.tidyverse.org/reference/diamonds.html"&gt;&lt;code&gt;diamonds&lt;/code&gt;&lt;/a&gt;
dataset, which contains the attributes and prices of over 50,000
diamonds.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(tidyverse)

ggplot(diamonds, aes(x = color, y = price)) + 
  stat_summary(geom = &amp;quot;pointrange&amp;quot;, fun.data = mean_cl_normal) + 
  facet_wrap(~cut) + 
  labs(x = &amp;quot;Color&amp;quot;, y = &amp;quot;Price&amp;quot;) +
  theme_bw(base_size = 13)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="filed90238852f1_files/figure-html/unnamed-chunk-1-1.png" width="70%" style="display: block; margin: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;The above plot shows the means and 95% confidence intervals of the
diamonds of different colors faceted by cut.&lt;/p&gt;
&lt;p&gt;Now, we can reorder the points in an ascending fashion for individual
facets, using the function &lt;code&gt;reorder_within()&lt;/code&gt; and
&lt;code&gt;scale_x_reordered()&lt;/code&gt; from the package
&lt;code&gt;tidytext&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;reorder_within(x, by, within, fun)&lt;/code&gt;, the argument
&lt;code&gt;x&lt;/code&gt; is the factor you would like to reorder, &lt;code&gt;by&lt;/code&gt;
is the continuous variable based on which &lt;code&gt;x&lt;/code&gt; is reordered,
&lt;code&gt;within&lt;/code&gt; is the faceting variable, and &lt;code&gt;fun&lt;/code&gt; is
the function to compute a statistics on the &lt;code&gt;by&lt;/code&gt; variable
that determines the ordering of levels in &lt;code&gt;x&lt;/code&gt;. Ok, that’s
quite wordy. An example will make things clear:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# install.packages(&amp;quot;tidytext&amp;quot;)  # install the package if you haven&amp;#39;t
library(tidytext)

ggplot(diamonds, aes(x = reorder_within(x = color, by = price, within = cut, fun = mean), y = price)) + 
  stat_summary(geom = &amp;quot;pointrange&amp;quot;, fun.data = mean_cl_normal) + 
  facet_wrap(~cut, scales = &amp;quot;free_x&amp;quot;) +  # need to set scales = &amp;quot;free_x&amp;quot; to allow for varying x-axes in individual facets  
  scale_x_reordered() +  # specify &amp;quot;limits = rev&amp;quot; in the function to get descending points
  labs(x = &amp;quot;Color&amp;quot;, y = &amp;quot;Price&amp;quot;) +
  theme_bw(base_size = 13)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="filed90238852f1_files/figure-html/unnamed-chunk-2-1.png" width="70%" style="display: block; margin: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;Reordered. Nice!&lt;/p&gt;
&lt;p&gt;Say we want to adjust the item order for just the facet “Fair”. We
can do so using the function &lt;code&gt;facetted_pos_scales()&lt;/code&gt; from the
package &lt;code&gt;ggh4x&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# install.packages(&amp;quot;ggh4x&amp;quot;)  # install the package if you haven&amp;#39;t
library(ggh4x)

# reordered color levels for &amp;quot;fair&amp;quot; diamonds
ordered_levels_fair &amp;lt;- fct_reorder(.f = filter(diamonds, cut == &amp;quot;Fair&amp;quot;)$color, 
                                   .x = filter(diamonds, cut == &amp;quot;Fair&amp;quot;)$price, 
                                   .fun = mean) %&amp;gt;% 
  levels()

ggplot(diamonds, aes(x = color, y = price)) +
  stat_summary(geom = &amp;quot;pointrange&amp;quot;, fun.data = mean_cl_normal) + 
  facet_wrap(~cut, scales = &amp;quot;free_x&amp;quot;) + 
  labs(x = &amp;quot;Color&amp;quot;, y = &amp;quot;Price&amp;quot;) +
  theme_bw(base_size = 13) + 
  facetted_pos_scales(x = list(cut == &amp;quot;Fair&amp;quot; ~ scale_x_discrete(limits = ordered_levels_fair)))  # x = list(...) means x-axis; cut == &amp;quot;Fair&amp;quot; identifies the facet &amp;quot;Fair&amp;quot;; ~ scale_x_discrete(limits = ) gives the new order for that facet   &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="filed90238852f1_files/figure-html/unnamed-chunk-3-1.png" width="70%" style="display: block; margin: auto;" /&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2 id="adjust-y-axis-scales-for-individual-facets"&gt;2. Adjust y-axis
scales for individual facets&lt;/h2&gt;
&lt;p&gt;There is an argument &lt;code&gt;scales =&lt;/code&gt; in
&lt;code&gt;facet_wrap()&lt;/code&gt; that allows you to have varying axes for
individual panels. You’ve seen &lt;code&gt;scales = "free_x"&lt;/code&gt; in the
previous figures, and the same goes for y-axis:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ggplot(diamonds, aes(x = color, y = price)) + 
  stat_summary(geom = &amp;quot;pointrange&amp;quot;, fun.data = mean_cl_normal) + 
  facet_wrap(~cut, scales = &amp;quot;free_y&amp;quot;) + 
  labs(x = &amp;quot;Color&amp;quot;, y = &amp;quot;Price&amp;quot;) +
  theme_bw(base_size = 13)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="filed90238852f1_files/figure-html/unnamed-chunk-4-1.png" width="80%" style="display: block; margin: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;Now the y-axis is determined for each facet by the range of the data
within. However, what if you want to truly customize the axes, say
changing the positions and labels of the tick marks?
&lt;code&gt;facetted_pos_scales()&lt;/code&gt; can do the trick!&lt;/p&gt;
&lt;p&gt;Let’s add a few tick marks to the “Fair” and “Premium” panel and cut
a few for the “Very Good” and “Ideal” panel so that each panel has five
tick marks:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ggh4x)

ggplot(diamonds, aes(x = color, y = price)) +
  stat_summary(geom = &amp;quot;pointrange&amp;quot;, fun.data = mean_cl_normal) + 
  facet_wrap(~cut, scales = &amp;quot;free_y&amp;quot;) +  # need to set &amp;#39;scales = &amp;quot;free_y&amp;quot;&amp;#39;
  labs(x = &amp;quot;Color&amp;quot;, y = &amp;quot;Price&amp;quot;) +
  theme_bw(base_size = 13) + 
  facetted_pos_scales(y = list(cut == &amp;quot;Fair&amp;quot; ~ scale_y_continuous(breaks = c(3500, 4000, 4500, 5000, 5500)),
                               cut == &amp;quot;Premium&amp;quot; ~ scale_y_continuous(breaks = c(3500, 4200, 4900, 5600, 6300)),
                               cut == &amp;quot;Very Good&amp;quot; ~ scale_y_continuous(breaks = c(3000, 3600, 4200, 4800, 5400)),
                               cut == &amp;quot;Ideal&amp;quot; ~ scale_y_continuous(breaks = c(2400, 3100, 3800, 4500, 5200))))  # a list of panels to be modified&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="filed90238852f1_files/figure-html/unnamed-chunk-5-1.png" width="80%" style="display: block; margin: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;Finally, we can combine both reordering and rescaling to create some
cool visual effects:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(tidytext)
library(ggh4x)

ggplot(diamonds, aes(x = reorder_within(x = color, by = price, within = cut, fun = mean), y = price)) + 
  stat_summary(geom = &amp;quot;pointrange&amp;quot;, fun.data = mean_cl_normal) + 
  facet_wrap(~cut, scales = &amp;quot;free&amp;quot;, nrow = 1) +  
  scale_x_reordered() + 
  labs(x = &amp;quot;Color&amp;quot;, y = &amp;quot;Price&amp;quot;) +
  theme_bw(base_size = 13) +
  facetted_pos_scales(y = list(cut == &amp;quot;Fair&amp;quot; ~ scale_y_continuous(limits = c(3800, 12000), breaks = c(3500)), 
                               cut == &amp;quot;Good&amp;quot; ~ scale_y_continuous(limits = c(1500, 11500), breaks = c(3875)),
                               cut == &amp;quot;Very Good&amp;quot; ~ scale_y_continuous(limits = c(-1000, 10000), breaks = c(4250)),
                               cut == &amp;quot;Premium&amp;quot; ~ scale_y_continuous(limits = c(-5000, 9000), breaks = c(4625)),
                               
                               cut == &amp;quot;Ideal&amp;quot; ~ scale_y_continuous(limits = c(-8500, 4700), breaks = c(5000))))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="filed90238852f1_files/figure-html/unnamed-chunk-6-1.png" width="80%" style="display: block; margin: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;Of course this plot is definitely &lt;strong&gt;NOT&lt;/strong&gt; appropriate
for data communication; it’s so deceiving and misleading! Just for pure
fun and also to see how versatile the two packages can be!!!&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;To summarize what we’ve talked about, we learned (1) how to reorder
the items along the x-axis for all individual facets using
&lt;code&gt;reorder_within()&lt;/code&gt; and &lt;code&gt;scale_x_reordered()&lt;/code&gt; from
the &lt;code&gt;tidytext&lt;/code&gt; package, or for specific facet(s) using
&lt;code&gt;facetted_pos_scales()&lt;/code&gt; from the &lt;code&gt;ggh4x&lt;/code&gt; package,
and (2) how to adjust axis scales for individual facets using
&lt;code&gt;facetted_pos_scales()&lt;/code&gt; from the &lt;code&gt;ggh4x&lt;/code&gt; package.
Knowing these two techniques will certainly help every ggplot lover go a
long way!&lt;/p&gt;
&lt;p&gt;That’s it for now and hope the topic in this post would be helpful
for you sometime in the future. And as always, don’t forget to leave
your comments and suggestions below if you have any!&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>61dcc1ef8f777b34c96e05dd5a0ca84c</distill:md5>
      <category>2022</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2022-05-12-post-15-manipulating-axis-scales-for-individual-facets</guid>
      <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2022-05-12-post-15-manipulating-axis-scales-for-individual-facets/../../homepage_images/Post15.png" medium="image" type="image/png" width="960" height="768"/>
    </item>
    <item>
      <title>Post #14. Multiple color scales in one ggplot</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2022-04-24-post-14-multiple-color-scales-in-one-ggplot</link>
      <description>Using different color scales for multiple geom layers in one ggplot with `ggnewscale` and `relayer`</description>
      <category>2022</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2022-04-24-post-14-multiple-color-scales-in-one-ggplot</guid>
      <pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2022-04-24-post-14-multiple-color-scales-in-one-ggplot/../../homepage_images/Post14.png" medium="image" type="image/png" width="1056" height="672"/>
    </item>
    <item>
      <title>Post #13. ggplot Legend Tips Series No.4: Merging ggplot legends</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2022-03-02-post-13-ggplot-legend-tips-series-no4-merging-ggplot-legends</link>
      <description>Come and learn two handy tips to merge two ggplot legends into one!</description>
      <category>2022</category>
      <category>Legend Tips Series</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2022-03-02-post-13-ggplot-legend-tips-series-no4-merging-ggplot-legends</guid>
      <pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2022-03-02-post-13-ggplot-legend-tips-series-no4-merging-ggplot-legends/../../homepage_images/Post13.png" medium="image" type="image/png" width="960" height="576"/>
    </item>
    <item>
      <title>Post #12. ggplot Legend Tips Series No.3: Three ways to turn off the legends in ggplots</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2022-02-05-post-12-ggplot-legend-tips-series-no3-three-ways-to-turn-off-ggplot-legends</link>
      <description>Come and learn three handy tips to turn off the legends in ggplots!</description>
      <category>2022</category>
      <category>Legend Tips Series</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2022-02-05-post-12-ggplot-legend-tips-series-no3-three-ways-to-turn-off-ggplot-legends</guid>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2022-02-05-post-12-ggplot-legend-tips-series-no3-three-ways-to-turn-off-ggplot-legends/../../homepage_images/Post12.png" medium="image" type="image/png" width="768" height="576"/>
    </item>
    <item>
      <title>Post #11. ggplot Legend Tips Series No.2: Working on continuous legends with guides()</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2022-02-01-post-11-ggplot-legend-tips-series-no2-working-on-continuous-legends-with-guides</link>
      <description>In this post, you will learn how to tweak the appearance of continuous legends in ggplots with `guides()`.</description>
      <category>2022</category>
      <category>Legend Tips Series</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2022-02-01-post-11-ggplot-legend-tips-series-no2-working-on-continuous-legends-with-guides</guid>
      <pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2022-02-01-post-11-ggplot-legend-tips-series-no2-working-on-continuous-legends-with-guides/../../homepage_images/Post11.png" medium="image" type="image/png" width="960" height="576"/>
    </item>
    <item>
      <title>Post #10. ggplot Legend Tips Series No.1: Working on discrete legends with guides()</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2022-01-28-post-10-ggplot-legend-tips-series-no1-working-on-discrete-scale-legends-with-guides</link>
      <description>In this post, you will learn how to tweak the appearance of discrete legends in ggplots with `guides()`.</description>
      <category>2022</category>
      <category>Legend Tips Series</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2022-01-28-post-10-ggplot-legend-tips-series-no1-working-on-discrete-scale-legends-with-guides</guid>
      <pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2022-01-28-post-10-ggplot-legend-tips-series-no1-working-on-discrete-scale-legends-with-guides/../../homepage_images/Post10.png" medium="image" type="image/png" width="960" height="576"/>
    </item>
    <item>
      <title>Post #9. Arrange multiple ggplots on one graphic device</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-12-20-post-9-arrange-multiple-ggplots</link>
      <description>Come and learn two methods to arrange multiple ggplots on one graphic device.</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-12-20-post-9-arrange-multiple-ggplots</guid>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-12-20-post-9-arrange-multiple-ggplots/../../homepage_images/Post9.png" medium="image" type="image/png" width="1152" height="1152"/>
    </item>
    <item>
      <title>Post #8. Pokemon phylogeny with ggdendro</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-10-01-post-8-pokemon-phylogeny-with-ggdendro</link>
      <description>Create a Pokemon phylogenetic tree in ggplot with the extension package ggdendro.</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-10-01-post-8-pokemon-phylogeny-with-ggdendro</guid>
      <pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-10-01-post-8-pokemon-phylogeny-with-ggdendro/../../homepage_images/Post8.png" medium="image" type="image/png" width="960" height="960"/>
    </item>
    <item>
      <title>Post #7. Customize the axis scales for individual ggplot facets</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-09-11-post-7-customize-the-axis-scales-for-individual-facets</link>
      <description>Come and learn how to customize the axis scales (axis limits, tick breaks, and tick labels) for individual ggplot facets!</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-09-11-post-7-customize-the-axis-scales-for-individual-facets</guid>
      <pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-09-11-post-7-customize-the-axis-scales-for-individual-facets/../../homepage_images/Post7.png" medium="image" type="image/png" width="1152" height="768"/>
    </item>
    <item>
      <title>Post #6. Play good music for your data - violin plots with ggplot</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-08-02-post-6-play-good-music-for-your-data-violin-plots-with-ggplot</link>
      <description>Visualize data distributions using violin plots with ggplot.</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-08-02-post-6-play-good-music-for-your-data-violin-plots-with-ggplot</guid>
      <pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-08-02-post-6-play-good-music-for-your-data-violin-plots-with-ggplot/../../homepage_images/Post6.png" medium="image" type="image/png" width="960" height="576"/>
    </item>
    <item>
      <title>Post #5. Awesome text displays with ggtext</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-07-10-post-5-awesome-text-display-with-ggtext</link>
      <description>Enhance text displays in your ggplots with the extension package ggtext!</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-07-10-post-5-awesome-text-display-with-ggtext</guid>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-07-10-post-5-awesome-text-display-with-ggtext/../../homepage_images/Post5.png" medium="image" type="image/png" width="1152" height="1152"/>
    </item>
    <item>
      <title>Post #4. Consistent colors of the same factor levels across figures</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-06-26-post-4-consistent-colors-of-the-same-factor-levels-across-figures</link>
      <description>In this post, I will show you a simple trick to keep the colors of the same factor levels consistent across different ggplot figures.</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-06-26-post-4-consistent-colors-of-the-same-factor-levels-across-figures</guid>
      <pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-06-26-post-4-consistent-colors-of-the-same-factor-levels-across-figures/../../homepage_images/Post4.png" medium="image" type="image/png" width="960" height="576"/>
    </item>
    <item>
      <title>Post #3. Pie charts with ggplot</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-06-18-post-3-pie-charts-with-ggplot</link>
      <description>Want to know how to create effective pie charts with ggplot? Dig in to learn more!</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-06-18-post-3-pie-charts-with-ggplot</guid>
      <pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-06-18-post-3-pie-charts-with-ggplot/../../homepage_images/Post3.png" medium="image" type="image/png" width="960" height="576"/>
    </item>
    <item>
      <title>Guest Post #1. Communicating the ESSENCE of your data</title>
      <dc:creator>William Ou</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-05-26-guest-post-1-communicating-the-essence-of-your-data</link>
      <description>Visualizing multi-dimensional and dynamic data can be challenging. In this post, I will show how you can better communicate these features with interactive plots and animations.</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-05-26-guest-post-1-communicating-the-essence-of-your-data</guid>
      <pubDate>Wed, 26 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-05-26-guest-post-1-communicating-the-essence-of-your-data/../../homepage_images/Guest_post1.gif" medium="image" type="image/gif"/>
    </item>
    <item>
      <title>Post #2. Three ways to create log axes in ggplots: which one should you use?</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-05-07-post-2-three-ways-to-create-log-axes-in-ggplots-which-one-should-you-use</link>
      <description>This post shows you three different ways to create log axes in ggplots and provides some suggestions on which method to use for your figures.</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-05-07-post-2-three-ways-to-create-log-axes-in-ggplots-which-one-should-you-use</guid>
      <pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-05-07-post-2-three-ways-to-create-log-axes-in-ggplots-which-one-should-you-use/../../homepage_images/Post2.png" medium="image" type="image/png" width="960" height="576"/>
    </item>
    <item>
      <title>Post #1. Center long legend titles in ggplots</title>
      <dc:creator>Gen-Chang Hsu</dc:creator>
      <link>https://genchanghsu.github.io/ggGallery/posts/2021-05-01-post-1-center-long-legend-titles-in-ggplots</link>
      <description>In this post, I will show you a simple quick hack to center long legend titles in ggplots without bothering gtables and grobs.</description>
      <category>2021</category>
      <guid>https://genchanghsu.github.io/ggGallery/posts/2021-05-01-post-1-center-long-legend-titles-in-ggplots</guid>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      <media:content url="https://genchanghsu.github.io/ggGallery/posts/2021-05-01-post-1-center-long-legend-titles-in-ggplots/../../homepage_images/Post1.png" medium="image" type="image/png" width="1152" height="672"/>
    </item>
  </channel>
</rss>
